@Library(["devpi", "PythonHelpers"]) _

def CONFIGURATIONS = [
    "3.6": [
        "os":[
            "linux":[
                base_image: "python:3.6",
                agents: [
                    build:[
                        dockerfile: "ci/docker/python/linux/Dockerfile",
                        label: "linux && docker",
                        additionalBuildArgs: "--build-arg PYTHON_VERSION=3.6",
                    ],
                    test:[
                        sdist:[
                            dockerfile: "ci/docker/python/linux/Dockerfile",
                            label: "linux && docker",
                            additionalBuildArgs: "--build-arg PYTHON_VERSION=3.6",
                        ]
                    ],
                    devpi: [
                        whl: [
                            dockerfile: [
                                filename: 'ci/docker/python/linux/Dockerfile',
                                label: 'linux && docker',
                                additionalBuildArgs: '--build-arg PYTHON_VERSION=3.6 --build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g)'
                            ]
                        ],
                        zip: [
                            dockerfile: [
                                filename: 'ci/docker/python/linux/Dockerfile',
                                label: 'linux && docker',
                                additionalBuildArgs: '--build-arg PYTHON_VERSION=3.6 --build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g)'
                            ]
                        ]
                    ]
                ]
            ],
            "windows":[
                python_install_url:"https://www.python.org/ftp/python/3.6.8/python-3.6.8-amd64.exe",
                base_image: "python:3.6.8-windowsservercore",
                agents: [
                    build:[
                        dockerfile: "ci/docker/python/windows/msvc/build/Dockerfile",
                        label: "windows && Docker",
                        additionalBuildArgs: "--build-arg PYTHON_INSTALLER_URL=https://www.python.org/ftp/python/3.6.8/python-3.6.8-amd64.exe --build-arg CHOCOLATEY_SOURCE",
                    ],
                    test:[
                        whl: [
                            dockerfile: "ci/docker/python/windows/msvc/test/Dockerfile",
                            label: "windows && Docker",
                            additionalBuildArgs: "--build-arg PYTHON_DOCKER_IMAGE_BASE=python:3.6.8-windowsservercore",
                        ],
                        sdist: [
                            dockerfile: "ci/docker/python/windows/msvc/build/Dockerfile",
                            label: "windows && Docker",
                            additionalBuildArgs: "--build-arg PYTHON_INSTALLER_URL=https://www.python.org/ftp/python/3.6.8/python-3.6.8-amd64.exe --build-arg CHOCOLATEY_SOURCE",
                        ]
                    ],
                    devpi: [
                        whl: [
                            dockerfile: [
                                filename: 'ci/docker/deploy/devpi/test/windows/whl/Dockerfile',
                                label: 'Windows&&Docker',
                                additionalBuildArgs: '--build-arg PYTHON_DOCKER_IMAGE_BASE=python:3.6-windowsservercore'
                            ]
                        ],
                        zip: [
                            dockerfile: [
                                filename: 'ci/docker/python/windows/msvc/build/Dockerfile',
                                label: 'Windows&&Docker',
                                additionalBuildArgs: '--build-arg PYTHON_INSTALLER_URL=https://www.python.org/ftp/python/3.6.8/python-3.6.8-amd64.exe --build-arg CHOCOLATEY_SOURCE'
                            ]
                        ]
                    ]
                ],
            ]
        ],
        tox_env: "py36",
        pkgRegex: [
            whl: "*cp36*.whl",
            sdist: "*.zip",
            devpi_wheel_regex: "cp36"
        ],
    ],
    "3.7": [
        "os":[
            "linux":[
                base_image: "python:3.7",
                agents: [
                    build:[
                        dockerfile: "ci/docker/python/linux/Dockerfile",
                        label: "linux && docker",
                        additionalBuildArgs: "--build-arg PYTHON_VERSION=3.7",
                    ],
                    test:[
                        sdist:[
                            dockerfile: "ci/docker/python/linux/Dockerfile",
                            label: "linux && docker",
                            additionalBuildArgs: "--build-arg PYTHON_VERSION=3.7",
                        ]
                    ],
                    devpi: [
                        whl: [
                            dockerfile: [
                                filename: 'ci/docker/python/linux/Dockerfile',
                                label: 'linux && docker',
                                additionalBuildArgs: '--build-arg PYTHON_VERSION=3.7 --build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g)'
                            ]
                        ],
                        zip: [
                            dockerfile: [
                                filename: 'ci/docker/python/linux/Dockerfile',
                                label: 'linux && docker',
                                additionalBuildArgs: '--build-arg PYTHON_VERSION=3.7 --build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g)'
                            ]
                        ]
                    ]
                ]
            ],
            "windows":[
                python_install_url:"https://www.python.org/ftp/python/3.7.5/python-3.7.5-amd64.exe",
                base_image: "python:3.7",
                agents: [
                    build:[
                        dockerfile: "ci/docker/python/windows/msvc/build/Dockerfile",
                        label: "windows && Docker",
                        additionalBuildArgs: "--build-arg PYTHON_INSTALLER_URL=https://www.python.org/ftp/python/3.7.5/python-3.7.5-amd64.exe --build-arg CHOCOLATEY_SOURCE",
                    ],
                    test:[
                        whl: [
                            dockerfile: "ci/docker/python/windows/msvc/test/Dockerfile",
                            label: "windows && Docker",
                            additionalBuildArgs: "--build-arg PYTHON_DOCKER_IMAGE_BASE=python:3.7",
                        ],
                        sdist: [
                            dockerfile: "ci/docker/python/windows/msvc/build/Dockerfile",
                            label: "windows && Docker",
                            additionalBuildArgs: "--build-arg PYTHON_INSTALLER_URL=https://www.python.org/ftp/python/3.7.5/python-3.7.5-amd64.exe --build-arg CHOCOLATEY_SOURCE",
                        ]
                    ],
                    devpi: [
                        whl: [
                            dockerfile: [
                                filename: 'ci/docker/deploy/devpi/test/windows/whl/Dockerfile',
                                label: 'Windows&&Docker',
                                additionalBuildArgs: '--build-arg PYTHON_DOCKER_IMAGE_BASE=python:3.7'
                            ]
                        ],
                        zip: [
                            dockerfile: [
                                filename: 'ci/docker/python/windows/msvc/build/Dockerfile',
                                label: 'Windows&&Docker',
                                additionalBuildArgs: '--build-arg PYTHON_INSTALLER_URL=https://www.python.org/ftp/python/3.7.5/python-3.7.5-amd64.exe --build-arg CHOCOLATEY_SOURCE'
                            ]
                        ]
                    ]
                ],
            ]
        ],
        tox_env: "py37",
        pkgRegex: [
            whl: "*cp37*.whl",
            sdist: "*.zip",
            devpi_wheel_regex: "cp37"
        ],
    ],
    "3.8": [
        "os":[
        "linux":[
                base_image: "python:3.8",
                agents: [
                    build:[
                        dockerfile: "ci/docker/python/linux/Dockerfile",
                        label: "linux && docker",
                        additionalBuildArgs: "--build-arg PYTHON_VERSION=3.8",
                    ],
                    test:[
                        sdist:[
                            dockerfile: "ci/docker/python/linux/Dockerfile",
                            label: "linux && docker",
                            additionalBuildArgs: "--build-arg PYTHON_VERSION=3.8",
                        ]
                    ],
                    devpi: [
                        whl: [
                            dockerfile: [
                                filename: 'ci/docker/python/linux/Dockerfile',
                                label: 'linux && docker',
                                additionalBuildArgs: '--build-arg PYTHON_VERSION=3.8 --build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g)'
                            ]
                        ],
                        zip: [
                            dockerfile: [
                                filename: 'ci/docker/python/linux/Dockerfile',
                                label: 'linux && docker',
                                additionalBuildArgs: '--build-arg PYTHON_VERSION=3.8 --build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g)'
                            ]
                        ]
                    ]
                ]
            ],
            "windows":[
                python_install_url:"https://www.python.org/ftp/python/3.8.3/python-3.8.3-amd64.exe",
                base_image: "python:3.7",
                agents: [
                    build:[
                        dockerfile: "ci/docker/python/windows/msvc/build/Dockerfile",
                        label: "windows && Docker",
                        additionalBuildArgs: "--build-arg PYTHON_INSTALLER_URL=https://www.python.org/ftp/python/3.8.3/python-3.8.3-amd64.exe --build-arg CHOCOLATEY_SOURCE",
                    ],
                    test:[
                        whl: [
                            dockerfile: "ci/docker/python/windows/msvc/test/Dockerfile",
                            label: "windows && Docker",
                            additionalBuildArgs: "--build-arg PYTHON_DOCKER_IMAGE_BASE=python:3.8",
                        ],
                        sdist: [
                            dockerfile: "ci/docker/python/windows/msvc/build/Dockerfile",
                            label: "windows && Docker",
                            additionalBuildArgs: "--build-arg PYTHON_INSTALLER_URL=https://www.python.org/ftp/python/3.8.3/python-3.8.3-amd64.exe --build-arg CHOCOLATEY_SOURCE",
                        ]
                    ],
                    devpi: [
                        whl: [
                            dockerfile: [
                                filename: 'ci/docker/deploy/devpi/test/windows/whl/Dockerfile',
                                label: 'Windows&&Docker',
                                additionalBuildArgs: '--build-arg PYTHON_DOCKER_IMAGE_BASE=python:3.8'
                            ]
                        ],
                        zip: [
                            dockerfile: [
                                filename: 'ci/docker/python/windows/msvc/build/Dockerfile',
                                label: 'Windows&&Docker',
                                additionalBuildArgs: '--build-arg PYTHON_INSTALLER_URL=https://www.python.org/ftp/python/3.8.3/python-3.8.3-amd64.exe --build-arg CHOCOLATEY_SOURCE'
                            ]
                        ]
                    ]
                ],
            ]
        ],
        tox_env: "py38",
        pkgRegex: [
            whl: "*cp38*.whl",
            sdist: "*.zip",
            devpi_wheel_regex: "cp38"
        ],
    ]
]
def run_dumpbin(glob){
    script{
        findFiles(glob: glob).each{
            bat(
                label: "Checking Python extension for dependents",
                script: "dumpbin /DEPENDENTS ${it.path}"
            )
        }
    }
}

def devpiRunTest(pkgPropertiesFile, devpiIndex, devpiSelector, devpiUsername, devpiPassword, toxEnv){
    script{
        def props = readProperties interpolate: true, file: pkgPropertiesFile
//         cleanWs(patterns: [[pattern: "uiucprescon.imagevalidate.dist/METADATA", type: 'INCLUDE']])
        if (isUnix()){
            sh(
                label: "Connecting to Devpi",
                script: "devpi use https://devpi.library.illinois.edu --clientdir certs/ "
            )

            sh(
                label: "Logging into Devpi",
                script: "devpi login ${devpiUsername} --password ${devpiPassword} --clientdir certs/"
            )

            sh(
                label: "Selecting Devpi index",
                script: "devpi use ${devpiIndex} --clientdir certs/"
            )
            sh(
                label: "Running test",
                script: "devpi test --index ${devpiIndex} ${props.Name}==${props.Version} -s ${devpiSelector} --clientdir certs/ -e ${toxEnv} --tox-args=\"-vv\""
            )
        } else {
            bat(
                label: "Running tests on Devpi",
                script: """devpi use https://devpi.library.illinois.edu --clientdir certs\\
                           devpi login ${devpiUsername} --password ${devpiPassword} --clientdir certs\\
                           devpi use ${devpiIndex} --clientdir certs\\
                           devpi test --index ${devpiIndex} ${props.Name}==${props.Version} -s ${devpiSelector} --clientdir certs\\ -e ${toxEnv} --tox-args=\"-vv\"
                           """
            )
        }
    }
}

def remove_from_devpi(devpiExecutable, pkgName, pkgVersion, devpiIndex, devpiUsername, devpiPassword){
    script {
                try {
                    bat "${devpiExecutable} login ${devpiUsername} --password ${devpiPassword}"
                    bat "${devpiExecutable} use ${devpiIndex}"
                    bat "${devpiExecutable} remove -y ${pkgName}==${pkgVersion}"
                } catch (Exception ex) {
                    echo "Failed to remove ${pkgName}==${pkgVersion} from ${devpiIndex}"
            }

    }
}

def get_package_version(stashName, metadataFile){
    ws {
        unstash "${stashName}"
        script{
            def props = readProperties interpolate: true, file: "${metadataFile}"
            deleteDir()
            return props.Version
        }
    }
}

def get_package_name(stashName, metadataFile){
    ws {
        unstash "${stashName}"
        script{
            def props = readProperties interpolate: true, file: "${metadataFile}"
            deleteDir()
            return props.Name
        }
    }
}
//
// def test_wheel(pkgRegex, python_version){
//     script{
//
//         bat "python -m venv venv\\${NODE_NAME}\\${python_version} && venv\\${NODE_NAME}\\${python_version}\\Scripts\\python.exe -m pip install pip --upgrade && venv\\${NODE_NAME}\\${python_version}\\Scripts\\pip.exe install tox --upgrade"
//
//         def python_wheel = findFiles glob: "**/${pkgRegex}"
//         python_wheel.each{
//             echo "Testing ${it}"
//             bat "${WORKSPACE}\\venv\\${NODE_NAME}\\${python_version}\\Scripts\\tox.exe --installpkg=${WORKSPACE}\\${it} -e py${python_version}"
//         }
//     }
// }

def get_sonarqube_unresolved_issues(report_task_file){
    script{

        def props = readProperties  file: '.scannerwork/report-task.txt'
        def response = httpRequest url : props['serverUrl'] + "/api/issues/search?componentKeys=" + props['projectKey'] + "&resolved=no"
        def outstandingIssues = readJSON text: response.content
        return outstandingIssues
    }
}

def getChocolateySource(){
    script{
        try{
            configFileProvider([configFile(fileId: 'local_chocolatey_cache', variable: 'CHOCO_PROP_FILES')]) {
                def props = readProperties(CHOCO_PROP_FILES)
                return CHOCO_PROP_FILES.url
            }
        } catch (exc) {
            return 'https://chocolatey.org/api/v2/'
        }
    }
}


def sonarcloudSubmit(metadataFile, outputJson, sonarCredentials){
    def props = readProperties interpolate: true, file: metadataFile
    withSonarQubeEnv(installationName:"sonarcloud", credentialsId: sonarCredentials) {
        if (env.CHANGE_ID){
            sh(
                label: "Running Sonar Scanner",
                script:"sonar-scanner -Dsonar.projectVersion=${props.Version} -Dsonar.buildString=\"${env.BUILD_TAG}\" -Dsonar.pullrequest.key=${env.CHANGE_ID} -Dsonar.pullrequest.base=${env.CHANGE_TARGET}"
                )
        } else {
            sh(
                label: "Running Sonar Scanner",
                script: "sonar-scanner -Dsonar.projectVersion=${props.Version} -Dsonar.buildString=\"${env.BUILD_TAG}\" -Dsonar.branch.name=${env.BRANCH_NAME}"
                )
        }
    }
     timeout(time: 1, unit: 'HOURS') {
         def sonarqube_result = waitForQualityGate(abortPipeline: false)
         if (sonarqube_result.status != 'OK') {
             unstable "SonarQube quality gate: ${sonarqube_result.status}"
         }
         def outstandingIssues = get_sonarqube_unresolved_issues(".scannerwork/report-task.txt")
         writeJSON file: outputJson, json: outstandingIssues
     }
}
def build_wheel(){
    if(isUnix()){
        sh(label: "Building Python Wheel",
            script: 'python setup.py build -b build/ -j $(grep -c ^processor /proc/cpuinfo) --build-lib build/lib --build-temp build/temp bdist_wheel -d ./dist'
        )
    } else{
        bat(label: "Building Python Wheel",
            script: "python setup.py build -b build/ -j ${env.NUMBER_OF_PROCESSORS} --build-lib build/lib --build-temp build/temp bdist_wheel -d ./dist"
        )
    }
}

def test_pkg(glob, timeout_time){

    findFiles( glob: glob).each{
        timeout(timeout_time){
            if(isUnix()){
                sh(label: "Testing ${it}",
                   script: """python --version
                              tox --installpkg=${it.path} -e py -vv
                              """
                )
            } else {
                bat(label: "Testing ${it}",
                    script: """python --version
                               tox --installpkg=${it.path} -e py -vv
                               """
                )
            }
        }
    }
}

def defaultChocolateySource = getChocolateySource()

pipeline {
    agent none
  options {
        timeout(time: 1, unit: 'DAYS')
  }
  environment {
    build_number = VersionNumber(projectStartDate: '2018-6-12', versionNumberString: '${BUILD_DATE_FORMATTED, "yy"}${BUILD_MONTH, XX}${BUILDS_THIS_MONTH, XX}', versionPrefix: '', worstResultForIncrement: 'SUCCESS')
  }
  parameters {
      booleanParam(name: "TEST_RUN_TOX", defaultValue: false, description: "Run Tox Tests")
//       TODO: turn BUILD_PACKAGES default to false
      booleanParam(name: "BUILD_PACKAGES", defaultValue: true, description: "Build Python packages")
      booleanParam(name: "DEPLOY_DEVPI", defaultValue: false, description: "Deploy to devpi on https://devpi.library.illinois.edu/DS_Jenkins/${env.BRANCH_NAME}")
      booleanParam(name: "DEPLOY_DEVPI_PRODUCTION", defaultValue: false, description: "Deploy to production devpi on https://devpi.library.illinois.edu/production/release. Release Branch Only")
      booleanParam(name: "DEPLOY_DOCS", defaultValue: false, description: "Update online documentation. Release Branch Only")
      string(name: 'DEPLOY_DOCS_URL_SUBFOLDER', defaultValue: "imagevalidate", description: 'The directory that the docs should be saved under')
  }

  stages {
        stage("Getting Distribution Info"){
            agent {
                dockerfile {
                    filename "${CONFIGURATIONS["3.7"].os.linux.agents.build.dockerfile}"
                    label "${CONFIGURATIONS["3.7"].os.linux.agents.build.label}"
                    additionalBuildArgs "${CONFIGURATIONS["3.7"].os.linux.agents.build.additionalBuildArgs}"
                }
            }
            steps{
                timeout(5){
                    sh "python setup.py dist_info"
                }
            }
            post{
                success{
                    stash includes: "uiucprescon.imagevalidate.dist-info/**", name: 'DIST-INFO'
                    archiveArtifacts artifacts: "uiucprescon.imagevalidate.dist-info/**"
                }
                cleanup{
                    cleanWs(
                        deleteDirs: true,
                        patterns: [
                            [pattern: "uiucprescon.imagevalidate.dist-info/", type: 'INCLUDE'],
                            [pattern: ".eggs/", type: 'INCLUDE'],
                        ]
                    )
                }
            }
        }
    stage("Building"){
        agent {
            dockerfile {
                filename "${CONFIGURATIONS["3.7"].os.linux.agents.build.dockerfile}"
                label "${CONFIGURATIONS["3.7"].os.linux.agents.build.label}"
                additionalBuildArgs "${CONFIGURATIONS["3.7"].os.linux.agents.build.additionalBuildArgs}"
            }
        }
        stages{
            stage("Building Python Package"){
                steps {
                    sh(
                        label: "Building",
                        script: "python setup.py build -b build --build-lib build/lib -t build/temp build_ext --inplace"
                        )
                }
                post{
                   success{
                       stash includes: "uiucprescon/imagevalidate/*.dll,uiucprescon/imagevalidate/*.pyd,uiucprescon/imagevalidate/*.so", name: 'COMPILED_BINARIES'
                       stash includes: "build/**", name: 'LINUX_BUILD_DIRECTORY'
                   }
                   failure{
                        cleanWs(
                            deleteDirs: true,
                            patterns: [
                                [pattern: 'build/', type: 'INCLUDE'],
                                [pattern: ".eggs/", type: 'INCLUDE']
                            ]
                        )
                   }
                }
            }
            stage("Sphinx Documentation"){
                steps {
                    sh(
                        label: "Building docs on ${env.NODE_NAME}",
                        script: 'python -m sphinx -b html docs/source build/docs/html -d build/docs/doctrees'
                    )
                }
                post{
                    success{
                        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'build/docs/html', reportFiles: 'index.html', reportName: 'Documentation', reportTitles: ''])
                        script{
                            unstash "DIST-INFO"
                            def props = readProperties interpolate: true, file: "uiucprescon.imagevalidate.dist-info/METADATA"
                            def DOC_ZIP_FILENAME = "${props.Name}-${props.Version}.doc.zip"
                            zip archive: true, dir: "build/docs/html", glob: '', zipFile: "dist/${DOC_ZIP_FILENAME}"
                            stash includes: "dist/${DOC_ZIP_FILENAME},build/docs/html/**", name: 'DOCS_ARCHIVE'
                        }
                    }
                    cleanup{
                        cleanWs(patterns: [
                            [pattern: 'logs/build_sphinx.log', type: 'INCLUDE'],
                            [pattern: "dist/*.doc.zip", type: 'INCLUDE']
                            ]
                        )
                    }
                }
            }
        }
    }
    stage('Testing') {
        agent {
            dockerfile {
                    filename "${CONFIGURATIONS["3.7"].os.linux.agents.build.dockerfile}"
                    label "${CONFIGURATIONS["3.7"].os.linux.agents.build.label}"
                    additionalBuildArgs "${CONFIGURATIONS["3.7"].os.linux.agents.build.additionalBuildArgs}"
                }
        }
        stages{
            stage("Run Testing"){
              parallel {
                stage("Tox") {
                    when {
                        equals expected: true, actual: params.TEST_RUN_TOX
                    }
                    steps {
                        sh (
                            label: "Run Tox",
                            script: 'tox --workdir .tox -vv  -e py'
                        )
                    }
                }
                stage("Run PyTest Unit Tests"){
                    steps{
                        unstash "COMPILED_BINARIES"
                        catchError(buildResult: "UNSTABLE", message: 'Did not pass all pytest tests', stageResult: "UNSTABLE") {
                            sh(
                                label: "Running Pytest",
                                script:'''mkdir -p reports
                                          coverage run --parallel-mode --source=uiucprescon -m pytest --junitxml=reports/pytest.xml --integration
                                          '''
                            )
                        }
                    }
                    post {
                        always {
                            junit "reports/pytest.xml"
                            stash includes: "reports/pytest.xml", name: "PYTEST_REPORT"
                        }
                    }
                }
                stage("Run Doctest Tests"){
                  steps {
                    catchError(buildResult: "SUCCESS", message: 'Doctest found issues', stageResult: "UNSTABLE") {
                        sh( label: "Running Doctest",
                            script: '''coverage run --parallel-mode --source=uiucprescon -m sphinx -b doctest docs/source build/docs -d build/docs/doctrees -v
                                       mkdir -p reports
                                       mv build/docs/output.txt reports/doctest.txt
                                       '''
                            )
                    }
                  }
                  post{
                    always {
                      archiveArtifacts artifacts: "reports/doctest.txt"
                    }
                  }
                }
                stage("Run MyPy Static Analysis") {
                  steps{
                    catchError(buildResult: "SUCCESS", message: 'MyPy found issues', stageResult: "UNSTABLE") {
                        sh(
                            label: "Running Mypy",
                            script: '''mkdir -p logs
                                       mypy -p uiucprescon --html-report reports/mypy/html > logs/mypy.log
                                       '''
                        )
                    }
                  }
                  post {
                    always {
                        recordIssues(tools: [myPy(name: 'MyPy', pattern: 'logs/mypy.log')])
                        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: "reports/mypy/html/", reportFiles: 'index.html', reportName: 'MyPy HTML Report', reportTitles: ''])
                    }
                  }
                }
                stage("Run Flake8 Static Analysis") {
                    steps{
                        catchError(buildResult: "SUCCESS", message: 'Flake8 found issues', stageResult: "UNSTABLE") {
                            sh '''mkdir -p logs
                                  flake8 uiucprescon --format=pylint --tee --output-file=logs/flake8.log
                                  '''
                        }
                    }
                    post {
                        always {
                            recordIssues(tools: [flake8(name: 'Flake8', pattern: 'logs/flake8.log')])
                            stash includes: "logs/flake8.log", name: "FLAKE8_REPORT"
                        }
                    }
                }
              }
        }
      }
      post{
        always{
            sh(label: "combining coverage data",
               script: '''coverage combine
                          coverage xml -o ./reports/coverage.xml
                          coverage html -d ./reports/coverage
               '''
           )
            stash(includes: "reports/coverage.xml", name: "COVERAGE_REPORT")
            publishCoverage(
                adapters: [
                    coberturaAdapter('reports/coverage.xml')
                ],
                sourceFileResolver: sourceFiles('STORE_ALL_BUILD'),
                calculateDiffForChangeRequests: true
            )
        }
        cleanup{
            cleanWs(patterns: [
            [pattern: 'logs/flake8.log', type: 'INCLUDE'],
            [pattern: 'reports/coverage.xml"', type: 'INCLUDE'],
            ])
        }
      }
    }
    stage("Sonarcloud Analysis"){
        agent {
          dockerfile {
            filename 'ci/docker/sonarcloud/Dockerfile'
            label 'linux && docker'
          }
        }
        options{
            lock("uiucprescon.imagevalidate-sonarscanner")
        }
        steps{
            checkout scm
            sh "git fetch --all"
            unstash "COVERAGE_REPORT"
            unstash "PYTEST_REPORT"
//                 unstash "BANDIT_REPORT"
//                 unstash "PYLINT_REPORT"
            unstash "FLAKE8_REPORT"
            sonarcloudSubmit("uiucprescon.imagevalidate.dist-info/METADATA", "reports/sonar-report.json", 'sonarcloud-uiucprescon.imagevalidate')
//             script{
//                 withSonarQubeEnv(installationName:"sonarcloud", credentialsId: 'sonarcloud-uiucprescon.imagevalidate') {
//                     unstash "DIST-INFO"
//                     def props = readProperties(interpolate: true, file: "uiucprescon.imagevalidate.dist-info/METADATA")
//                     if (env.CHANGE_ID){
//                         sh(
//                             label: "Running Sonar Scanner",
//                             script:"sonar-scanner -Dsonar.projectVersion=${props.Version} -Dsonar.buildString=\"${env.BUILD_TAG}\" -Dsonar.pullrequest.key=${env.CHANGE_ID} -Dsonar.pullrequest.base=${env.CHANGE_TARGET}"
//                             )
//                     } else {
//                         sh(
//                             label: "Running Sonar Scanner",
//                             script: "sonar-scanner -Dsonar.projectVersion=${props.Version} -Dsonar.buildString=\"${env.BUILD_TAG}\" -Dsonar.branch.name=${env.BRANCH_NAME}"
//                             )
//                     }
//                 }
//                 timeout(time: 1, unit: 'HOURS') {
//                     def sonarqube_result = waitForQualityGate(abortPipeline: false)
//                     if (sonarqube_result.status != 'OK') {
//                         unstable "SonarQube quality gate: ${sonarqube_result.status}"
//                     }
//                     def outstandingIssues = get_sonarqube_unresolved_issues(".scannerwork/report-task.txt")
//                     writeJSON file: 'reports/sonar-report.json', json: outstandingIssues
//                 }
//             }
        }
        post {
            always{
                archiveArtifacts(
                    allowEmptyArchive: true,
                    artifacts: ".scannerwork/report-task.txt"
                )
                script{
                    if(fileExists('reports/sonar-report.json')){
                        stash includes: "reports/sonar-report.json", name: 'SONAR_REPORT'
                        archiveArtifacts allowEmptyArchive: true, artifacts: 'reports/sonar-report.json'
                        recordIssues(tools: [sonarQube(pattern: 'reports/sonar-report.json')])
                    }
                }
            }
        }
    }
    stage("Create Python Packages"){
        when{
            anyOf{
                equals expected: true, actual: params.BUILD_PACKAGES
                equals expected: true, actual: params.DEPLOY_DEVPI
                equals expected: true, actual: params.DEPLOY_DEVPI_PRODUCTION
            }
            beforeAgent true
        }
        stages{
            stage('Creating Source Package') {
                agent {
                    dockerfile {
                        filename "${CONFIGURATIONS["3.7"].os.linux.agents.build.dockerfile}"
                        label "${CONFIGURATIONS["3.7"].os.linux.agents.build.label}"
                        additionalBuildArgs "${CONFIGURATIONS["3.7"].os.linux.agents.build.additionalBuildArgs}"
                    }
                }
                steps {
                    sh "python setup.py sdist -d dist --format zip"
                }
                post{
                    always{
                        stash includes: 'dist/*.zip', name: "sdist"
                    }
                    success{
                        archiveArtifacts artifacts: "dist/*.zip", fingerprint: true
                    }
                    cleanup{
                        cleanWs(
                            deleteDirs: true,
                            patterns: [
                                [pattern: 'dist/', type: 'INCLUDE'],
                                [pattern: 'build/', type: 'INCLUDE'],
                            ]
                        )
                    }
                }
            }
        }
    }
    stage('Testing Packages') {
        when{
            anyOf{
                equals expected: true, actual: params.BUILD_PACKAGES
                equals expected: true, actual: params.DEPLOY_DEVPI
                equals expected: true, actual: params.DEPLOY_DEVPI_PRODUCTION
            }
            beforeAgent true
        }
        matrix{
            agent none
            axes{
                axis {
                    name 'PLATFORM'
                    values(
                        "linux",
                        "windows"
                    )
                }
                axis {
                    name "PYTHON_VERSION"
                    values(
                        "3.6",
                        "3.7",
                        "3.8"
                    )
                }
            }
            stages{
                stage("Creating bdist wheel"){
                    agent {
                        dockerfile {
                            filename "${CONFIGURATIONS[PYTHON_VERSION].os[PLATFORM].agents.build.dockerfile}"
                            label "${PLATFORM} && docker"
                            additionalBuildArgs "${CONFIGURATIONS[PYTHON_VERSION].os[PLATFORM].agents.build.additionalBuildArgs}"
                         }
                    }
                    steps{
                        timeout(15){
                            build_wheel()
//                             script{
//                                  if (isUnix()){
//                                  }
//                                  else{
//                                     bat(
//                                         script: "python setup.py build -b build/ -j${env.NUMBER_OF_PROCESSORS} --build-lib build/lib --build-temp build/temp bdist_wheel -d dist",
//                                         label: "Building Wheel for Python ${PYTHON_VERSION} for ${PLATFORM}"
//                                     )
//                                  }
//                             }
                        }
                    }
                    post{
                        always{
                            run_dumpbin("build/lib/**/*.pyd")
                            stash includes: 'dist/*.whl', name: "whl ${PYTHON_VERSION}"
                        }
                        success{
                            archiveArtifacts artifacts: "dist/*.whl", fingerprint: true
                        }
                        cleanup{
                            cleanWs(
                                deleteDirs: true,
                                patterns: [[pattern: 'dist/', type: 'INCLUDE']]
                            )
                        }
                    }
                }
                stage("Testing wheel package"){
                    agent {
                        dockerfile {
                            filename "${CONFIGURATIONS[PYTHON_VERSION].os[PLATFORM].agents.test['whl'].dockerfile}"
                            label "${CONFIGURATIONS[PYTHON_VERSION].os[PLATFORM].agents.test['whl'].label}"
                            additionalBuildArgs "${CONFIGURATIONS[PYTHON_VERSION].os[PLATFORM].agents.test['whl'].additionalBuildArgs}"
                         }
                    }
                    steps{
                        unstash "whl ${PYTHON_VERSION}"
                        catchError(stageResult: 'FAILURE') {
                            test_pkg("dist/**/${CONFIGURATIONS[PYTHON_VERSION].pkgRegex['whl']}}", 15)
                        }
//                         script{
//                             findFiles( glob: "dist/**/${CONFIGURATIONS[PYTHON_VERSION].pkgRegex['whl']}").each{
//                                 timeout(15){
//                                     if(PLATFORM == "windows"){
//                                         bat(
//                                             script: "tox --installpkg=${it.path} -e py -vv",
//                                             label: "Testing ${it}"
//                                         )
//                                     } else {
//                                         sh(
//                                             script: "tox --installpkg=${it.path} -e py -vv",
//                                             label: "Testing ${it}"
//                                         )
//                                     }
//                                 }
//                             }
//                         }
                    }
                    post{
                        cleanup{
                            cleanWs(
                                deleteDirs: true,
                                notFailBuild: true,
                                patterns: [
                                    [pattern: 'dist/', type: 'INCLUDE'],
                                    [pattern: '.tox/', type: 'INCLUDE'],
                                ]
                            )
                        }
                    }
                }
            }
        }
    }
    stage("Deploy to Devpi"){
        when {
            allOf{
                equals expected: true, actual: params.DEPLOY_DEVPI
                anyOf {
                    equals expected: "master", actual: env.BRANCH_NAME
                    equals expected: "dev", actual: env.BRANCH_NAME
                }
            }
            beforeAgent true
        }
        agent none
        environment{
            DEVPI = credentials("DS_devpi")
        }
        options{
            lock("uiucprescon.imagevalidate-devpi")
        }
        stages{
            stage("Deploy to Devpi Staging") {
                agent {
                    dockerfile {
                        filename 'ci/docker/deploy/devpi/deploy/Dockerfile'
                        label 'linux&&docker'
                        additionalBuildArgs '--build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g)'
                      }
                }
                steps {
                    unstash "whl 3.6"
                    unstash "whl 3.7"
                    unstash "whl 3.8"
                    unstash "sdist"
                    unstash "DOCS_ARCHIVE"
                    sh(
                        label: "Uploading to DevPi Staging",
                        script: """devpi use https://devpi.library.illinois.edu --clientdir ./devpi
                                   devpi login $DEVPI_USR --password $DEVPI_PSW --clientdir ./devpi
                                   devpi use /${env.DEVPI_USR}/${env.BRANCH_NAME}_staging --clientdir ./devpi
                                   devpi upload --from-dir dist --clientdir ./devpi"""
                    )
                }
            }
            stage("Test DevPi packages") {
                matrix {
                    axes {
                        axis {
                            name 'PLATFORM'
                            values(
                                "linux",
                                "windows"
                            )
                        }
                        axis {
                            name 'PYTHON_VERSION'
                            values '3.6', '3.7', '3.8'
                        }
                        axis {
                            name 'FORMAT'
                            values 'zip', "whl"
                        }
                    }
                    excludes{
                        exclude {
                            axis {
                                name 'PLATFORM'
                                values 'linux'
                            }
                            axis {
                                name 'FORMAT'
                                values 'whl'
                            }
                        }
                    }
                    agent none
                    stages{
                        stage("Testing DevPi Wheel Package"){
                            agent {
                              dockerfile {
                                additionalBuildArgs "${CONFIGURATIONS[PYTHON_VERSION].os[PLATFORM].agents.devpi[FORMAT].dockerfile.additionalBuildArgs}"
                                filename "${CONFIGURATIONS[PYTHON_VERSION].os[PLATFORM].agents.devpi[FORMAT].dockerfile.filename}"
                                label "${CONFIGURATIONS[PYTHON_VERSION].os[PLATFORM].agents.devpi[FORMAT].dockerfile.label}"
                              }
                            }
                            when{
                                equals expected: "whl", actual: FORMAT
                                beforeAgent true
                            }
                            steps{
                                timeout(10){
                                    unstash "DIST-INFO"
                                    devpiRunTest(
                                        "uiucprescon.imagevalidate.dist-info/METADATA",
                                        "${env.BRANCH_NAME}_staging",
                                        CONFIGURATIONS[PYTHON_VERSION].pkgRegex['devpi_wheel_regex'],
                                        DEVPI_USR,
                                        DEVPI_PSW,
                                        CONFIGURATIONS[PYTHON_VERSION].tox_env
                                        )
                                }
                            }
                        }
                        stage("Testing DevPi Source Package"){
                            agent {
                                dockerfile {
                                    additionalBuildArgs "${CONFIGURATIONS[PYTHON_VERSION].os[PLATFORM].agents.devpi[FORMAT].dockerfile.additionalBuildArgs}"
                                    filename "${CONFIGURATIONS[PYTHON_VERSION].os[PLATFORM].agents.devpi[FORMAT].dockerfile.filename}"
                                    label "${CONFIGURATIONS[PYTHON_VERSION].os[PLATFORM].agents.devpi[FORMAT].dockerfile.label}"
                                }
                            }
                            when{
                                equals expected: "zip", actual: FORMAT
                                beforeAgent true
                            }
                            steps{
                                unstash "DIST-INFO"
                                devpiRunTest(
                                    "uiucprescon.imagevalidate.dist-info/METADATA",
                                    "${env.BRANCH_NAME}_staging",
                                    "zip",
                                    DEVPI_USR,
                                    DEVPI_PSW,
                                    CONFIGURATIONS[PYTHON_VERSION].tox_env
                                )
//                                 script{
//                                     def props = readProperties interpolate: true, file: "uiucprescon.imagevalidate.dist-info/METADATA"
//                                     if (isUnix()){
//                                         sh(
//                                             label: "Running tests on Devpi",
//                                             script: """devpi use https://devpi.library.illinois.edu --clientdir ./certs/
//                                                        devpi login $DEVPI_USR --password $DEVPI_PSW --clientdir ./certs/
//                                                        devpi use ${env.BRANCH_NAME}_staging --clientdir ./certs/
//                                                        devpi test --index ${env.BRANCH_NAME}_staging ${props.Name}==${props.Version} -s zip --clientdir ./certs/ -e ${CONFIGURATIONS[PYTHON_VERSION].tox_env} -v"""
//                                         )
//                                     } else {
//                                         bat(
//                                             label: "Running tests on Devpi",
//                                             script: """devpi use https://devpi.library.illinois.edu --clientdir certs\\
//                                                        devpi login %DEVPI_USR% --password %DEVPI_PSW% --clientdir certs\\
//                                                        devpi use ${env.BRANCH_NAME}_staging --clientdir certs\\
//                                                        devpi test --index ${env.BRANCH_NAME}_staging ${props.Name}==${props.Version} -s zip --clientdir certs\\ -e ${CONFIGURATIONS[PYTHON_VERSION].tox_env} -v"""
//                                         )
//                                     }
//                                 }
                            }
                        }
                    }
                }
            }
            stage("Deploy to DevPi Production") {
                when {
                    allOf{
                        equals expected: true, actual: params.DEPLOY_DEVPI_PRODUCTION
                        branch "master"
                    }
                    beforeAgent true
                    beforeInput true
                }
                options{
                      timeout(time: 1, unit: 'DAYS')
                }
                input {
                  message 'Release to DevPi Production? '
                }
                agent {
                    dockerfile {
                        filename 'ci/docker/deploy/devpi/deploy/Dockerfile'
                        label 'linux&&docker'
                        additionalBuildArgs '--build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g)'
                    }
                }
                steps {

                    script {
                        unstash "DIST-INFO"
                        def props = readProperties interpolate: true, file: 'uiucprescon.imagevalidate.dist-info/METADATA'
                        sh(
                            label: "Pushing to DS_Jenkins/${env.BRANCH_NAME} index",
                            script: """devpi use https://devpi.library.illinois.edu --clientdir ./devpi
                                       devpi login $DEVPI_USR --password $DEVPI_PSW --clientdir ./devpi
                                       devpi push --index DS_Jenkins/${env.BRANCH_NAME}_staging ${props.Name}==${props.Version} production/release --clientdir ./devpi
                                       """
                        )
//                         unstash "DIST-INFO"
//                         def props = readProperties interpolate: true, file: 'py3exiv2bind.dist-info/METADATA'
//                         try{
//                             timeout(30) {
//                                 input "Release ${props.Name} ${props.Version} (https://devpi.library.illinois.edu/DS_Jenkins/${env.BRANCH_NAME}_staging/${props.Name}/${props.Version}) to DevPi Production? "
//                             }
//                             sh "devpi use https://devpi.library.illinois.edu --clientdir ${WORKSPACE}/devpi  && devpi login $DEVPI_USR --password $DEVPI_PSW --clientdir ${WORKSPACE}/devpi && devpi use /DS_Jenkins/${env.BRANCH_NAME}_staging --clientdir ${WORKSPACE}/devpi && devpi push --index ${env.DEVPI_USR}/${env.BRANCH_NAME}_staging ${props.Name}==${props.Version} production/release --clientdir ${WORKSPACE}/devpi"
//                         } catch(err){
//                             echo "User response timed out. Packages not deployed to DevPi Production."
//                         }
                    }
                }
            }
        }
        post{
            success{
                node('linux && docker') {
                   script{
                        docker.build("imagevalidate:devpi",'-f ./ci/docker/deploy/devpi/deploy/Dockerfile --build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g) .').inside{
                            unstash "DIST-INFO"
                            def props = readProperties interpolate: true, file: 'uiucprescon.imagevalidate.dist-info/METADATA'
                            sh(
                                label: "Connecting to DevPi Server",
                                script: """devpi use https://devpi.library.illinois.edu --clientdir ./devpi
                                           devpi login $DEVPI_USR --password $DEVPI_PSW --clientdir ./devpi
                                           devpi use /DS_Jenkins/${env.BRANCH_NAME}_staging --clientdir ./devpi
                                           devpi push ${props.Name}==${props.Version} DS_Jenkins/${env.BRANCH_NAME} --clientdir ./devpi
                                           """
                            )
                        }
                   }
                }
            }
            cleanup{
                node('linux && docker') {
                   script{
                        docker.build("imagevalidate:devpi",'-f ./ci/docker/deploy/devpi/deploy/Dockerfile --build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g) .').inside{
                            unstash "DIST-INFO"
                            def props = readProperties interpolate: true, file: 'uiucprescon.imagevalidate.dist-info/METADATA'
                            sh(
                                label: "Connecting to DevPi Server",
                                script: """devpi use https://devpi.library.illinois.edu --clientdir ./devpi
                                           devpi login $DEVPI_USR --password $DEVPI_PSW --clientdir ./devpi
                                           devpi use /DS_Jenkins/${env.BRANCH_NAME}_staging --clientdir ./devpi
                                           devpi remove -y ${props.Name}==${props.Version} --clientdir ./devpi
                                           """
                               )
                        }
                   }
                }
            }
        }
    }
    stage("Release") {
      parallel {
        stage("Deploy Online Documentation") {
          when {
            allOf{
              equals expected: true, actual: params.DEPLOY_DOCS
              branch "master"
            }
          }
          steps {
            dir("build/docs/html/"){
              input 'Update project documentation?'
              sshPublisher(
                publishers: [
                  sshPublisherDesc(
                    configName: 'apache-ns - lib-dccuser-updater', 
                    sshLabel: [label: 'Linux'], 
                    transfers: [sshTransfer(excludes: '', 
                    execCommand: '', 
                    execTimeout: 120000, 
                    flatten: false, 
                    makeEmptyDirs: false, 
                    noDefaultExcludes: false, 
                    patternSeparator: '[, ]+',
                    remoteDirectory: "${params.DEPLOY_DOCS_URL_SUBFOLDER}", 
                    remoteDirectorySDF: false, 
                    removePrefix: '', 
                    sourceFiles: '**')], 
                  usePromotionTimestamp: false, 
                  useWorkspaceInPromotion: false, 
                  verbose: true
                  )
                ]
              )
            }
          }
        }
      }
    }
  }
}
