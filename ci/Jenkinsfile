@Library(["devpi", "PythonHelpers"]) _

def remove_from_devpi(devpiExecutable, pkgName, pkgVersion, devpiIndex, devpiUsername, devpiPassword){
    script {
                try {
                    bat "${devpiExecutable} login ${devpiUsername} --password ${devpiPassword}"
                    bat "${devpiExecutable} use ${devpiIndex}"
                    bat "${devpiExecutable} remove -y ${pkgName}==${pkgVersion}"
                } catch (Exception ex) {
                    echo "Failed to remove ${pkgName}==${pkgVersion} from ${devpiIndex}"
            }

    }
}

def test_wheel(pkgRegex, python_version){
    script{

        bat "python -m venv venv\\${NODE_NAME}\\${python_version} && venv\\${NODE_NAME}\\${python_version}\\Scripts\\python.exe -m pip install pip --upgrade && venv\\${NODE_NAME}\\${python_version}\\Scripts\\pip.exe install tox --upgrade"

        def python_wheel = findFiles glob: "**/${pkgRegex}"
        dir("source"){
            python_wheel.each{
                echo "Testing ${it}"
                bat "${WORKSPACE}\\venv\\${NODE_NAME}\\${python_version}\\Scripts\\tox.exe --installpkg=${WORKSPACE}\\${it} -e py${python_version}"
            }

        }


    }
}

def get_sonarqube_unresolved_issues(report_task_file){
    script{

        def props = readProperties  file: '.scannerwork/report-task.txt'
        def response = httpRequest url : props['serverUrl'] + "/api/issues/search?componentKeys=" + props['projectKey'] + "&resolved=no"
        def outstandingIssues = readJSON text: response.content
        return outstandingIssues
    }
}


pipeline {
  agent {
    label 'Windows && longfilenames && VS2015 && Python3'
    // customWorkspace "c:/Jenkins/temp/${JOB_NAME}/${BUILD_NUMBER}"

  }
  triggers {
        cron('@daily')
    }
  options {
        disableConcurrentBuilds()  //each branch has 1 job running at a time
        timeout(120)  // Timeout after 120 minutes. This shouldn't take this long but it hangs for some reason
        checkoutToSubdirectory("source")
  }
  environment {
    build_number = VersionNumber(projectStartDate: '2018-6-12', versionNumberString: '${BUILD_DATE_FORMATTED, "yy"}${BUILD_MONTH, XX}${BUILDS_THIS_MONTH, XX}', versionPrefix: '', worstResultForIncrement: 'SUCCESS')
    PIP_CACHE_DIR="${WORKSPACE}\\pipcache\\"
    PIPENV_CACHE_DIR="${WORKSPACE}\\..\\.virtualenvs\\cache\\"
    WORKON_HOME ="${WORKSPACE}\\pipenv\\"
    PIPENV_NOSPIN="DISABLED"
    PATH = "${tool 'CPython-3.6'};${tool 'CPython-3.7'};$PATH"

    DEVPI = credentials("DS_devpi")

  }
  parameters {
    booleanParam(name: "FRESH_WORKSPACE", defaultValue: false, description: "Purge workspace before staring and checking out source")
      booleanParam(name: "TEST_RUN_TOX", defaultValue: true, description: "Run Tox Tests")
      booleanParam(name: "DEPLOY_DEVPI", defaultValue: false, description: "Deploy to devpi on https://devpi.library.illinois.edu/DS_Jenkins/${env.BRANCH_NAME}")
      booleanParam(name: "DEPLOY_DEVPI_PRODUCTION", defaultValue: false, description: "Deploy to production devpi on https://devpi.library.illinois.edu/production/release. Release Branch Only")
      booleanParam(name: "DEPLOY_DOCS", defaultValue: false, description: "Update online documentation. Release Branch Only")
      string(name: 'DEPLOY_DOCS_URL_SUBFOLDER', defaultValue: "imagevalidate", description: 'The directory that the docs should be saved under')
  }

  stages {
    stage('Configure Environment') {
        environment{
            PATH = "${tool 'CPython-3.6'}\\Scripts;$PATH"
        }
        stages{
            stage("Purge All Existing Data in Workspace"){
                when{
                    anyOf{
                        equals expected: true, actual: params.FRESH_WORKSPACE
                        triggeredBy "TimerTriggerCause"
                    }
                }
                steps{
                    deleteDir()
                    dir("source"){
                        checkout scm
                    }
                }
            }
            stage("Getting Distribution Info"){
                    environment{
                        PATH = "${tool 'CPython-3.7'};${tool 'cmake3.13'};$PATH"
                    }
                    steps{
                        dir("source"){
                            bat "python setup.py dist_info"
                        }
                    }
                    post{
                        success{
                            dir("source"){
                                stash includes: "uiucprescon_imagevalidate.dist-info/**", name: 'DIST-INFO'
                                archiveArtifacts artifacts: "uiucprescon_imagevalidate.dist-info/**"
                            }
                        }
                    }
                }
            stage("Installing Required System Level Dependencies"){
                steps{

                    lock("system_python_${NODE_NAME}"){
                        bat "python -m pip install --upgrade pip --quiet"
                    }
                    bat "if not exist logs mkdir logs"
                }
                post{
                    always{
                        lock("system_python_${NODE_NAME}"){
                            bat "\"${tool 'CPython-3.6'}\\python.exe\" -m pip list > logs\\pippackages_system_${NODE_NAME}.log"
                        }
                        archiveArtifacts artifacts: "logs/pippackages_system_${NODE_NAME}.log"
                    }
                    failure {
                        deleteDir()
                    }
                }
            }
            stage("Installing Pipfile"){
                    options{
                        timeout(5)
                    }
                    steps {
                        dir("source"){
                            bat "pipenv install --dev --deploy && pipenv run pip list > ..\\logs\\pippackages_pipenv_${NODE_NAME}.log"
                            bat "pipenv check"

                        }
                    }
                    post{
                        always{
                            archiveArtifacts artifacts: "logs/pippackages_pipenv_*.log"
                        }
                        failure {
                            deleteDir()
                        }
                        cleanup{
                            cleanWs(patterns: [[pattern: "logs/pippackages_pipenv_*.log", type: 'INCLUDE']])
                        }
                    }
            }
            stage("Creating Python Virtual Environment for Building"){
                steps{
                    bat "python -m venv venv36"
                    script {
                        try {
                            bat "call venv36\\Scripts\\python.exe -m pip install -U pip"
                        }
                        catch (exc) {
                            bat "python -m venv venv36"
                            bat "call venv36\\Scripts\\python.exe -m pip install -U pip --no-cache-dir"
                        }
                    }
                    bat "venv36\\Scripts\\pip.exe install -U setuptools"
                    bat "venv36\\Scripts\\pip.exe install -r source\\requirements.txt --upgrade-strategy only-if-needed"
                }
                post{
                    success{
                        bat "venv36\\Scripts\\pip.exe list > ${WORKSPACE}\\logs\\pippackages_venv_${NODE_NAME}.log"
                        archiveArtifacts artifacts: "logs/pippackages_venv_${NODE_NAME}.log"
                    }
                }
            }
          }
          post{
            failure {
                bat "dir"
                deleteDir()
            }
          }
        }
    stage("Building"){
        environment{
            PATH = "${tool 'CPython-3.6'}\\Scripts;${tool 'cmake3.13'};$PATH"
        }
        stages{
            stage("Building Python Package"){

                steps {
                    dir("source"){
                        powershell "&pipenv run python setup.py build -b ${WORKSPACE}\\36\\build --build-lib ${WORKSPACE}\\build\\36\\lib -j${env.NUMBER_OF_PROCESSORS} -t ${WORKSPACE}\\build\\36\\temp build_ext --inplace  | tee ${WORKSPACE}\\logs\\build.log"
                    }

                }
                post{
                    always{
                        recordIssues(tools: [
                                        pyLint(name: 'Setuptools Build: PyLint', pattern: 'logs/build.log'),
                                        msBuild(name: 'Setuptools Build: MSBuild', pattern: 'logs/build.log')
                                    ]
                                )
                        archiveArtifacts artifacts: "logs/build.log"
                    }
                    failure{
                        echo "Failed to build Python package"
                    }
                    success{
                        echo "Successfully built project is ./build."
                    }
                }
            }
            stage("Sphinx Documentation"){
                environment{
                    PKG_NAME = get_package_name("DIST-INFO", "uiucprescon_imagevalidate.dist-info/METADATA")
                    PKG_VERSION = get_package_version("DIST-INFO", "uiucprescon_imagevalidate.dist-info/METADATA")
                }
                steps {
                    echo "Building docs on ${env.NODE_NAME}"
                    dir("source"){
                        powershell "& pipenv run sphinx-build -b html ${WORKSPACE}\\source\\docs\\source ${WORKSPACE}\\build\\docs\\html -d ${WORKSPACE}\\build\\docs\\doctrees | tee ${WORKSPACE}\\logs\\build_sphinx.log"
                    }
                }
                post{
                    always {
                        recordIssues(tools: [sphinxBuild(name: 'Sphinx Documentation Build', pattern: 'logs/build_sphinx.log')])
                        archiveArtifacts artifacts: 'logs/build_sphinx.log'
                    }
                    success{
                        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'build/docs/html', reportFiles: 'index.html', reportName: 'Documentation', reportTitles: ''])
                        script{
                            def DOC_ZIP_FILENAME = "${env.PKG_NAME}-${env.PKG_VERSION}.doc.zip"
                            zip archive: true, dir: "${WORKSPACE}/build/docs/html", glob: '', zipFile: "dist/${env.DOC_ZIP_FILENAME}"
                            stash includes: "dist/${env.DOC_ZIP_FILENAME},build/docs/html/**", name: 'DOCS_ARCHIVE'
                        }

                    }
                    cleanup{
                        cleanWs(patterns: [
                            [pattern: 'logs/build_sphinx.log', type: 'INCLUDE'],
                            [pattern: "dist/*.doc.zip", type: 'INCLUDE']
                            ]
                        )
                    }
                }
            }
        }
    }

    stage('Testing') {
        environment{
            PATH = "${WORKSPACE}\\venv36\\Scripts;${tool 'CPython-3.6'}\\Scripts;${tool 'cmake3.13'};$PATH"
            junit_filename = "junit-${env.NODE_NAME}-${env.GIT_COMMIT.substring(0,7)}-pytest.xml"
        }
        stages{
            stage("Installing Python Testing Packages"){
                steps{
                    bat 'venv36\\Scripts\\pip.exe install -U setuptools "tox>=3.7,<3.10"'
                    bat "venv36\\Scripts\\pip.exe install pytest-cov lxml flake8 mypy pylint -r source\\requirements.txt --upgrade-strategy only-if-needed"
                }
            }
            stage("Run Testing"){
              parallel {
                stage("Tox") {
                    when {
                        equals expected: true, actual: params.TEST_RUN_TOX
                    }
                    environment {
                        PATH = "${tool 'CPython-3.6'};${tool 'CPython-3.7'};$PATH"
                    }
                    steps {
                        bat "if not exist reports\\coverage mkdir reports\\coverage"
                        dir("source"){
                            script{
                                try{
                                    bat (
                                        label: "Run Tox",
                                        script: "tox --parallel=auto --parallel-live --workdir ${WORKSPACE}\\.tox -vv --result-json=${WORKSPACE}\\logs\\tox_report.json -- --junitxml=${WORKSPACE}\\reports\\${junit_filename} --junit-prefix=${env.NODE_NAME}-pytest"
                                    )

                                } catch (exc) {
                                    bat(
                                        label: "Run Tox with new environments",
                                        script: "tox --recreate --parallel=auto --parallel-live --workdir ${WORKSPACE}\\.tox -vv --result-json=${WORKSPACE}\\logs\\tox_report.json -- --junitxml=${WORKSPACE}\\reports\\${junit_filename} --junit-prefix=${env.NODE_NAME}-pytest"
                                    )
                                }
                            }
                        }
                    }
                    post {
                        always {
                            archiveArtifacts allowEmptyArchive: true, artifacts: '.tox/py*/log/*.log,.tox/log/*.log,logs/tox_report.json'
                            recordIssues(tools: [pep8(id: 'tox', name: 'Tox', pattern: '.tox/py*/log/*.log,.tox/log/*.log')])
                        }
                        cleanup{
                            cleanWs(
                                patterns: [
                                    [pattern: '.tox/py*/log/*.log', type: 'INCLUDE'],
                                    [pattern: '.tox/log/*.log', type: 'INCLUDE'],
                                    [pattern: 'logs/rox_report.json', type: 'INCLUDE']
                                ]
                            )
                        }
                    }
                }
                stage("Run PyTest Unit Tests"){

                    steps{
                        dir("source"){
                            catchError(buildResult: "UNSTABLE", message: 'Did not pass all pytest tests', stageResult: "UNSTABLE") {
                                bat(
                                    label: "Running Pytest",
                                    script:"pipenv run python -m pytest --junitxml=${WORKSPACE}/reports/pytest/${junit_filename} --junit-prefix=${env.NODE_NAME}-pytest --cov-report html:${WORKSPACE}/reports/pytestcoverage/  --cov-report xml:${WORKSPACE}/reports/coverage.xml --cov=uiucprescon --integration --cov-config=${WORKSPACE}/source/setup.cfg"
                                )
                            }
                        }
                    }
                    post {
                        always {
                            junit "reports/pytest/${junit_filename}"
                            publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: "reports/pytestcoverage", reportFiles: 'index.html', reportName: 'Coverage.py', reportTitles: ''])

                            publishCoverage adapters: [
                                        coberturaAdapter('reports/coverage.xml')
                                    ],
                                sourceFileResolver: sourceFiles('STORE_ALL_BUILD'),
                                calculateDiffForChangeRequests: true


                        }

                    }
                }
                stage("Run Doctest Tests"){
                  steps {
                    dir("source"){
                        bat "if not exist reports\\doctests mkdir reports\\doctests"
                        catchError(buildResult: "SUCCESS", message: 'Doctest found issues', stageResult: "UNSTABLE") {
                            bat "pipenv run sphinx-build -b doctest docs\\source ${WORKSPACE}\\build\\docs -d ${WORKSPACE}\\build\\docs\\doctrees -v"
                        }
                    }
                    bat "move build\\docs\\output.txt reports\\doctest.txt"
                  }
                  post{
                    always {
                      archiveArtifacts artifacts: "reports/doctest.txt"
                    }
                  }
                }
                stage("Run MyPy Static Analysis") {
                  steps{
                    bat "if not exist reports\\mypy\\html mkdir reports\\mypy\\html"
                    dir("source"){
                        catchError(buildResult: "SUCCESS", message: 'MyPy found issues', stageResult: "UNSTABLE") {
                            bat(
                                label: "Running Mypy",
                                script: "${WORKSPACE}\\venv36\\Scripts\\mypy.exe -p uiucprescon --html-report ${WORKSPACE}\\reports\\mypy\\html > ${WORKSPACE}\\logs\\mypy.log"
                            )
                        }
                    }
                  }
                  post {
                    always {
                        recordIssues(tools: [myPy(name: 'MyPy', pattern: 'logs/mypy.log')])
                        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: "reports/mypy/html/", reportFiles: 'index.html', reportName: 'MyPy HTML Report', reportTitles: ''])
                    }
                  }
                }
                stage("Run Flake8 Static Analysis") {
                    steps{
                        dir("source"){
                            catchError(buildResult: "SUCCESS", message: 'Flake8 found issues', stageResult: "UNSTABLE") {
                                bat "${WORKSPACE}\\venv36\\Scripts\\flake8.exe uiucprescon --format=pylint --tee --output-file=${WORKSPACE}\\logs\\flake8.log"
                            }
                        }
                    }
                    post {
                        always {
                            recordIssues(tools: [flake8(name: 'Flake8', pattern: 'logs/flake8.log')])
                        }
                    }
                }
              }
          }
            stage("Run Sonarqube Analysis"){
                when{
                    equals expected: "master", actual: env.BRANCH_NAME
                }
                options{
                    timeout(5)
                }
                environment{
                    scannerHome = tool name: 'sonar-scanner-3.3.0', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
                }
                steps{
                    withSonarQubeEnv(installationName: "sonarqube.library.illinois.edu") {
                        bat(
                            label: "Running sonar scanner",
                            script: '\
"%scannerHome%/bin/sonar-scanner" \
-D"sonar.projectVersion=%PKG_VERSION%" \
-D"sonar.projectBaseDir=%WORKSPACE%/source" \
-D"sonar.buildString=%BUILD_TAG%" \
-D"sonar.scm.provider=git" \
-D"sonar.python.coverage.reportPaths=%WORKSPACE%/reports/coverage.xml" \
-D"sonar.python.xunit.reportPath=%WORKSPACE%/reports/pytest/%junit_filename%" \
-D"sonar.working.directory=%WORKSPACE%\\.scannerwork" \
-X'
                        )

                    }
                    script{
                        def sonarqube_result = waitForQualityGate(abortPipeline: false)
                        if (sonarqube_result.status != 'OK') {
                            unstable "SonarQube quality gate: ${sonarqube_result.status}"
                        }
                        def outstandingIssues = get_sonarqube_unresolved_issues(".scannerwork/report-task.txt")
                        writeJSON file: 'reports/sonar-report.json', json: outstandingIssues
                    }
                }
                post{
                    always{
                        archiveArtifacts(
                            allowEmptyArchive: true,
                            artifacts: ".scannerwork/report-task.txt"
                        )
                        stash includes: "reports/sonar-report.json", name: 'SONAR_REPORT'
                        archiveArtifacts allowEmptyArchive: true, artifacts: 'reports/sonar-report.json'
                        node('Windows'){
                                checkout scm
                                unstash "SONAR_REPORT"
                                recordIssues(tools: [sonarQube(pattern: 'reports/sonar-report.json')])
                            }
                    }
                }
            }
      }
      post{
        cleanup{
            cleanWs(patterns: [
            [pattern: 'logs/flake8.log', type: 'INCLUDE'],
            [pattern: 'reports/coverage.xml"', type: 'INCLUDE'],
            ])
        }
      }
    }
    stage('Packaging') {
      environment{
          PATH = "${tool 'cmake3.13'};$PATH"
      }
      parallel{
        stage("Python sdist"){
            environment{
                PATH = "${tool 'CPython-3.6'};$PATH"
            }
            steps {
                dir("source"){
                    bat "python setup.py sdist -d ${WORKSPACE}\\dist --format zip"
                }
            }
            post{
                success{
                    stash includes: 'dist/*.zip', name: "sdist"
                    archiveArtifacts artifacts: "dist/*.zip", fingerprint: true
                }
            }
        }
        stage("Python 3.6 whl"){
          environment {
            PATH = "${tool 'CPython-3.6'};${tool 'CPython-3.6'}\\Scripts;$PATH"
          }
          options{
            retry 2
          }
          steps {
            dir("source"){
              bat(
                label: "Building wheel file for Python 3.6",
                script: "pipenv run python setup.py build -b ${WORKSPACE}\\36\\build --build-lib ${WORKSPACE}\\build\\36\\lib -j${env.NUMBER_OF_PROCESSORS} -t ${WORKSPACE}\\build\\36\\temp bdist_wheel -d ${WORKSPACE}\\dist"
                )
            }
          }
          post{
            success {
              archiveArtifacts artifacts: "dist/*p36*.whl", fingerprint: true
              stash includes: 'dist/*p36*.whl', name: "whl 3.6"
              
            }
          }
        }
        stage("Python 3.7 whl"){
          agent {
            node {
              label "Windows && Python3 && VS2015"
            }
          }
          environment {
            PATH = "${tool 'cmake3.13'};${tool 'CPython-3.7'};$PATH"
          }
          options{
            retry 2
          }
          steps {
            bat "\"${tool 'CPython-3.7'}\\python.exe\" -m venv venv37 && venv37\\scripts\\python.exe -m pip install pip --upgrade && venv37\\scripts\\pip.exe install --upgrade setuptools wheel"
            dir("source"){
                bat(
                    label: "Building wheel file for Python 3.6",
                    script: "${WORKSPACE}\\venv37\\scripts\\python.exe setup.py build -b ../build/37/ -j${env.NUMBER_OF_PROCESSORS} --build-lib ../build/37/lib/ --build-temp ../build/37/temp build_ext build_clib --cmake-path=${tool 'cmake3.13'}\\cmake.exe bdist_wheel -d ${WORKSPACE}\\dist"
                )
            }
          }
          post{
              success{
                  stash includes: 'dist/*p37*.whl', name: "whl 3.7"
                  archiveArtifacts artifacts: "dist/*p37*.whl", fingerprint: true
              }
              cleanup{
                  cleanWs(
                      deleteDirs: true,
                      patterns: [
                        [pattern: 'source', type: 'INCLUDE'],
                        [pattern: '*tmp', type: 'INCLUDE'],
                        [pattern: "dist", type: 'INCLUDE']
                      ]
                  )
              }
          }
        }
      }
      post{
        cleanup{
          cleanWs(patterns: [[pattern: "dist/*.whl,dist/*.tar.gz,dist/*.zip", type: 'INCLUDE']])
        }
      }
    }
    stage("Deploying to DevPi") {
        when {
            allOf{
                anyOf{
                    equals expected: true, actual: params.DEPLOY_DEVPI
                    triggeredBy "TimerTriggerCause"
                }
                anyOf {
                    equals expected: "master", actual: env.BRANCH_NAME
                    equals expected: "dev", actual: env.BRANCH_NAME
                }
            }
        }
        options{
            timestamps()
        }
        environment{
                PATH = "${WORKSPACE}\\venv36\\Scripts;${PATH}"
                PKG_NAME = get_package_name("DIST-INFO", "uiucprescon_imagevalidate.dist-info/METADATA")
                PKG_VERSION = get_package_version("DIST-INFO", "uiucprescon_imagevalidate.dist-info/METADATA")
            }
        stages{
            stage("Install DevPi client"){
              steps {
                bat "${WORKSPACE}\\venv36\\Scripts\\pip.exe install devpi-client"

              }

            }
            stage("Upload to DevPi Staging"){
              steps {
                unstash "whl 3.6"
                unstash "whl 3.7"
                unstash "sdist"
                unstash "DOCS_ARCHIVE"
                bat "devpi use https://devpi.library.illinois.edu && devpi login ${env.DEVPI_USR} --password ${env.DEVPI_PSW} && devpi use /${env.DEVPI_USR}/${env.BRANCH_NAME}_staging && devpi upload --from-dir dist"

              }

            }
            stage("Test DevPi Packages") {
                parallel {
                    stage("Testing DevPi .zip Package with Python 3.6 and 3.7"){
                        environment {
                            PATH = "${tool 'CPython-3.7'};${tool 'CPython-3.6'};$PATH"
                        }
                        agent {
                            node {
                                label "Windows && Python3 && VS2015"
                            }
                        }
                        options {
                            skipDefaultCheckout(true)

                        }
                        stages{
                            stage("Creating venv to Test sdist"){
                                    steps {
                                        lock("system_python_${NODE_NAME}"){
                                            bat "python -m venv venv\\venv36"
                                        }
                                        bat "venv\\venv36\\Scripts\\python.exe -m pip install pip --upgrade && venv\\venv36\\Scripts\\pip.exe install setuptools --upgrade && venv\\venv36\\Scripts\\pip.exe install \"tox<3.7\" detox devpi-client"
                                    }

                            }
                            stage("Testing Submitted Source Distribution") {
                                  environment {
                                      PATH = "${WORKSPACE}\\venv36\\Scripts;${tool 'cmake3.13'};${tool 'CPython-3.6'};${tool 'CPython-3.7'};$PATH"
                                      CL = "/MP"
                                  }
                                  options {
                                        timeout(20)
                                    }
                                  steps {
                                        devpiTest(
                                            devpiExecutable: "${powershell(script: '(Get-Command devpi).path', returnStdout: true).trim()}",
                                            url: "https://devpi.library.illinois.edu",
                                            index: "${env.BRANCH_NAME}_staging",
                                            pkgName: "${env.PKG_NAME}",
                                            pkgVersion: "${env.PKG_VERSION}",
                                            pkgRegex: "zip",
                                            detox: false
                                        )
                                  }
                            }
                        }
                        post {
                            failure {
                                echo "Tests for .zip source on DevPi failed."
                            }
                            cleanup{
                                cleanWs(
                                    deleteDirs: true,
                                    patterns: [
                                        [pattern: '*tmp', type: 'INCLUDE'],
                                        [pattern: 'certs', type: 'INCLUDE'],
                                    ]
                                )
                            }
                        }
                    }


                    stage("Built Distribution: py36 .whl") {
                          agent {
                                node {
                                    label "Windows && Python3"
                                }
                          }
                          environment {
                            PATH = "${WORKSPACE}\\venv36\\Scripts;${tool 'CPython-3.6'};$PATH"
                          }
                          options {
                            skipDefaultCheckout(true)
                          }
                          stages{
                                stage("Creating venv to Test py36 .whl"){
                                    environment {
                                        PATH = "${tool 'CPython-3.6'};$PATH"
                                    }
                                    steps {
                                        lock("system_python_${NODE_NAME}"){
                                            bat "(if not exist venv\\36 mkdir venv\\36) && python -m venv venv\\36"
                                        }
                                        bat "venv\\36\\Scripts\\python.exe -m pip install pip --upgrade && venv\\36\\Scripts\\pip.exe install setuptools --upgrade && venv\\36\\Scripts\\pip.exe install \"tox<3.7\" devpi-client"
                                    }

                                }
                                stage("Testing DevPi .whl Package with Python 3.6"){
                                    options {
                                        timeout(10)
                                    }
                                    environment {
                                        PATH = "${WORKSPACE}\\venv\\36\\Scripts;$PATH"
                                    }
                                    steps {
                                          echo "Testing Whl package in devpi"
                                          devpiTest(
                                                  devpiExecutable: "${powershell(script: '(Get-Command devpi).path', returnStdout: true).trim()}",
                                                  url: "https://devpi.library.illinois.edu",
                                                  index: "${env.BRANCH_NAME}_staging",
                                                  pkgName: "${env.PKG_NAME}",
                                                  pkgVersion: "${env.PKG_VERSION}",
                                                  pkgRegex: "36.*whl",
                                                  detox: false,
                                                  toxEnvironment: "py36"
                                              )
                                    }
                                    post {
                                        failure {
                                            echo "Tests for whl on DevPi failed."
                                        }
                                        cleanup{
                                            cleanWs(
                                                deleteDirs: true,
                                                patterns: [
                                                    [pattern: '*tmp', type: 'INCLUDE'],
                                                    [pattern: 'certs', type: 'INCLUDE'],
                                                ]
                                            )
                                      }
                                    }
                                }
                          }
                    }
                    stage("Built Distribution: py37 .whl") {
                        agent {
                            node {
                                label "Windows && Python3"
                            }
                        }
                        environment {
                            PATH = "${WORKSPACE}\\venv\\37\\Scripts;${tool 'CPython-3.7'};$PATH"
                        }
                        options {
                            skipDefaultCheckout(true)
                        }
                        stages{
                            stage("Creating venv to Test py37 .whl"){
                                    environment {
                                        PATH = "${tool 'CPython-3.7'};$PATH"
                                    }
                                    steps {
                                        lock("system_python_${NODE_NAME}"){
                                            bat "(if not exist venv\\37 mkdir venv\\37) && python -m venv venv\\37"
                                        }
                                        bat "venv\\37\\Scripts\\python.exe -m pip install pip --upgrade && venv\\37\\Scripts\\pip.exe install setuptools --upgrade && venv\\37\\Scripts\\pip.exe install \"tox<3.7\" devpi-client"
                                    }

                                }
                            stage("Testing DevPi .whl Package with Python 3.7"){
                                environment {
                                    PATH = "${WORKSPACE}\\venv\\37\\Scripts;${tool 'CPython-3.7'};$PATH"
                                }
                                options {
                                    timeout(10)
                                }

                                steps {
                                        echo "Testing Whl package in devpi"
                                        devpiTest(
                                                devpiExecutable: "${powershell(script: '(Get-Command devpi).path', returnStdout: true).trim()}",
                                                url: "https://devpi.library.illinois.edu",
                                                index: "${env.BRANCH_NAME}_staging",
                                                pkgName: "${env.PKG_NAME}",
                                                pkgVersion: "${env.PKG_VERSION}",
                                                pkgRegex: "37.*whl",
                                                detox: false,
                                                toxEnvironment: "py37"
                                            )

                                        echo "Finished testing Built Distribution: .whl"
                                    }
                                post {
                                    failure {
                                        echo "Tests for whl on DevPi failed."
                                    }
                                    cleanup{
                                        cleanWs(
                                            deleteDirs: true,
                                            patterns: [
                                                [pattern: '*tmp', type: 'INCLUDE'],
                                                [pattern: 'certs', type: 'INCLUDE'],
                                            ]
                                        )
                                    }
                                }
                            }
                        }
                    }
                }
            }

            stage("Release to DevPi Production") {
              when {
                allOf{
                  equals expected: true, actual: params.DEPLOY_DEVPI_PRODUCTION
                  branch "master"
                }
              }
              steps{
                input "Release ${env.PKG_NAME} ${env.PKG_VERSION} to DevPi Production?"
                bat "venv36\\Scripts\\devpi.exe login ${env.DEVPI_USR} --password ${env.DEVPI_PSW} && venv36\\Scripts\\devpi.exe use /DS_Jenkins/${env.BRANCH_NAME}_staging && venv36\\Scripts\\devpi.exe push ${env.PKG_NAME}==${env.PKG_VERSION} production/release"
              }
            }
        }
        post {
            success {
                echo "It Worked. Pushing file to ${env.BRANCH_NAME} index"
                script {
                    withCredentials([usernamePassword(credentialsId: 'DS_devpi', usernameVariable: 'DEVPI_USERNAME', passwordVariable: 'DEVPI_PASSWORD')]) {
                        bat "venv36\\Scripts\\devpi.exe login ${DEVPI_USERNAME} --password ${DEVPI_PASSWORD} && venv36\\Scripts\\devpi.exe use /${DEVPI_USERNAME}/${env.BRANCH_NAME}_staging && venv36\\Scripts\\devpi.exe push ${env.PKG_NAME}==${env.PKG_VERSION} ${DEVPI_USERNAME}/${env.BRANCH_NAME}"
                    }
                }
            }
            cleanup{
                remove_from_devpi("venv36\\Scripts\\devpi.exe", "${env.PKG_NAME}", "${env.PKG_VERSION}", "/${env.DEVPI_USR}/${env.BRANCH_NAME}_staging", "${env.DEVPI_USR}", "${env.DEVPI_PSW}")
            }
      }
    }
    stage("Release") {
      parallel {

        stage("Deploy Online Documentation") {
          when {
            allOf{
              equals expected: true, actual: params.DEPLOY_DOCS
              branch "master"
            }
          }
          steps {
            dir("${WORKSPACE}\\build/docs/html/"){
              input 'Update project documentation?'
              sshPublisher(
                publishers: [
                  sshPublisherDesc(
                    configName: 'apache-ns - lib-dccuser-updater', 
                    sshLabel: [label: 'Linux'], 
                    transfers: [sshTransfer(excludes: '', 
                    execCommand: '', 
                    execTimeout: 120000, 
                    flatten: false, 
                    makeEmptyDirs: false, 
                    noDefaultExcludes: false, 
                    patternSeparator: '[, ]+', 
                    remoteDirectory: "${params.DEPLOY_DOCS_URL_SUBFOLDER}", 
                    remoteDirectorySDF: false, 
                    removePrefix: '', 
                    sourceFiles: '**')], 
                  usePromotionTimestamp: false, 
                  useWorkspaceInPromotion: false, 
                  verbose: true
                  )
                ]
              )
            }
          }
        }
      }
    }
  }
  post {
    cleanup {
      cleanWs(
            deleteDirs: true,
            patterns: [
                [pattern: 'dist', type: 'INCLUDE'],
//                    [pattern: 'build', type: 'INCLUDE'],
                [pattern: 'reports', type: 'INCLUDE'],
                [pattern: 'logs', type: 'INCLUDE'],
                [pattern: 'certs', type: 'INCLUDE'],
                [pattern: '*tmp', type: 'INCLUDE'],
                [pattern: "source", type: 'INCLUDE'],
//                [pattern: "source/**/*.dll", type: 'INCLUDE'],
//                [pattern: "source/**/*.pyd", type: 'INCLUDE'],
//                [pattern: "source/**/*.exe", type: 'INCLUDE'],
//                [pattern: "source/**/*.exe", type: 'INCLUDE']
                ]
            )
    }
  }
}
