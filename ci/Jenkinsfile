@Library("devpi") _

def PKG_NAME = "unknown"
def PKG_VERSION = "unknown"
def DOC_ZIP_FILENAME = "doc.zip"
def junit_filename = "junit.xml"
def REPORT_DIR = ""
def LOGS_DIR = ""
def BUILD_DIR = ""
def DIST_DIR = ""
def SOURCE_DIR = ""
def VENV_ROOT = ""
def VENV_PYTHON = ""
def VENV_PIP = ""

pipeline {
  agent {
    node{
        label 'Windows && longfilenames && VS2015'
        // customWorkspace "c:/Jenkins/temp/${JOB_NAME}/${BUILD_NUMBER}"

    }
  }
  triggers {
        cron('@daily')
    }
  options {
        disableConcurrentBuilds()  //each branch has 1 job running at a time
        timeout(60)  // Timeout after 60 minutes. This shouldn't take this long but it hangs for some reason
        checkoutToSubdirectory("source")
  }
  environment {
    build_number = VersionNumber(projectStartDate: '2018-6-12', versionNumberString: '${BUILD_DATE_FORMATTED, "yy"}${BUILD_MONTH, XX}${BUILDS_THIS_MONTH, XX}', versionPrefix: '', worstResultForIncrement: 'SUCCESS')
    PIP_CACHE_DIR="${WORKSPACE}\\pipcache\\"
    PIPENV_CACHE_DIR="${WORKSPACE}\\..\\.virtualenvs\\cache\\"
    WORKON_HOME ="${WORKSPACE}\\pipenv\\"
    PIPENV_NOSPIN="DISABLED"

  }
  parameters {
    booleanParam(name: "FRESH_WORKSPACE", defaultValue: false, description: "Purge workspace before staring and checking out source")
      booleanParam(name: "BUILD_DOCS", defaultValue: true, description: "Build documentation")
      booleanParam(name: "TEST_RUN_PYTEST", defaultValue: true, description: "Run PyTest unit tests")
      booleanParam(name: "TEST_RUN_TOX", defaultValue: true, description: "Run Tox Tests")
      booleanParam(name: "TEST_DOCTEST", defaultValue: true, description: "Run Doctest on the documentation")
      booleanParam(name: "TEST_RUN_MYPY", defaultValue: true, description: "Run MyPy Tests")
      booleanParam(name: "TEST_RUN_FLAKE8", defaultValue: true, description: "Run Flake8 Tests")
      booleanParam(name: "DEPLOY_DEVPI", defaultValue: true, description: "Deploy to devpi on https://devpi.library.illinois.edu/DS_Jenkins/${env.BRANCH_NAME}")
      booleanParam(name: "DEPLOY_DEVPI_PRODUCTION", defaultValue: false, description: "Deploy to production devpi on https://devpi.library.illinois.edu/production/release. Release Branch Only")
      booleanParam(name: "DEPLOY_DOCS", defaultValue: false, description: "Update online documentation. Release Branch Only")
      string(name: 'DEPLOY_DOCS_URL_SUBFOLDER', defaultValue: "imagevalidate", description: 'The directory that the docs should be saved under')
  }

  stages {
    stage('Configure Environment') {
      stages{
        stage("Purge All Existing Data in Workspace"){
            when{
                anyOf{
                    equals expected: true, actual: params.FRESH_WORKSPACE
                    triggeredBy "TimerTriggerCause"
                }
            }
            steps{
                deleteDir()
                dir("source"){
                    checkout scm
                }
            }
        }
        stage("Setting Global Job Variables"){

        
          steps {
            // Set up the reports directory variable 
            script{
                REPORT_DIR = "${WORKSPACE}\\reports"
                LOGS_DIR = "${WORKSPACE}\\logs"
                BUILD_DIR = "${WORKSPACE}\\build"
                DIST_DIR = "${WORKSPACE}\\dist"
                
            }
          }
          post{
            always{
              echo """Report Directory       = ${REPORT_DIR}
Logs directory         = ${LOGS_DIR}
Build directory        = ${BUILD_DIR}
Distribution directory = ${WORKSPACE}/dist"""
            }
          }
        }
        
        stage("Cleanup"){
          steps {
            dir("${LOGS_DIR}"){
              deleteDir()
              bat "dir"
            }
            

            dir("${WORKSPACE}\\build"){
              deleteDir()
            }

            dir("${WORKSPACE}/dist"){
              deleteDir()
            }

            dir("${REPORT_DIR}"){
              deleteDir()
              echo "Cleaned out reports directory"
              bat "dir"
            }
          }
        }
        stage("Installing required system level dependencies"){
            steps{
                lock("system_python_${NODE_NAME}"){
                    bat "${tool 'CPython-3.6'}\\python -m pip install --upgrade pip --quiet"
                }
            }
            post{
                always{
                    lock("system_python_${NODE_NAME}"){
                        bat "${tool 'CPython-3.6'}\\python -m pip list > logs\\pippackages_system_${NODE_NAME}.log"
                    }
                    archiveArtifacts artifacts: "logs/pippackages_system_${NODE_NAME}.log"
                }
                failure {
                    deleteDir()
                }
            }
        }
        stage("Setting Project Metadata Variables"){
          steps{      
            script {
              dir("source"){
                PKG_NAME = bat(returnStdout: true, script: "@${tool 'CPython-3.6'}\\python  setup.py --name").trim()
                PKG_VERSION = bat(returnStdout: true, script: "@${tool 'CPython-3.6'}\\python setup.py --version").trim()
              }
      
              // Multibranch jobs add the slash and add the branch to the job name. I need only the job name
              def alljob = env.JOB_NAME.tokenize("/") as String[]
              def project_name = alljob[0]
              DOC_ZIP_FILENAME = "${PKG_NAME}-${PKG_VERSION}.doc.zip"
              
              junit_filename = "junit-${env.NODE_NAME}-${env.GIT_COMMIT.substring(0,7)}-pytest.xml"
            }
          }
          post{
            always{
              echo """Name                   = ${PKG_NAME}
Version                = ${PKG_VERSION}
documentation zip file = ${DOC_ZIP_FILENAME}"""
              
            } 
          }
        }
        stage("Installing Pipfile"){
                options{
                    timeout(5)
                }
                steps {
                    dir("source"){
                        bat "pipenv install --dev --deploy && pipenv run pip list > ..\\logs\\pippackages_pipenv_${NODE_NAME}.log"
                        bat "pipenv check"

                    }
                }
                post{
                    always{
                        archiveArtifacts artifacts: "logs/pippackages_pipenv_*.log"
                    }
                    failure {
                        deleteDir()
                    }
                    cleanup{
                        cleanWs(patterns: [[pattern: "logs/pippackages_pipenv_*.log", type: 'INCLUDE']])
                    }
                }
        }
        stage("Creating virtualenv for building"){
            steps{
                bat "${tool 'CPython-3.6'}\\python -m venv venv36"
                script {
                    try {
                        bat "call venv36\\Scripts\\python.exe -m pip install -U pip"
                    }
                    catch (exc) {
                        bat "${tool 'CPython-3.6'}\\python -m venv venv36"
                        bat "call venv36\\Scripts\\python.exe -m pip install -U pip --no-cache-dir"
                    }
                }
                bat "venv36\\Scripts\\pip.exe install -U setuptools \"tox>=3.7\""
                bat "venv36\\Scripts\\pip.exe install devpi-client pytest-cov lxml flake8 mypy -r source\\requirements.txt --upgrade-strategy only-if-needed"
            }
            post{
                success{
                    bat "venv36\\Scripts\\pip.exe list > ${WORKSPACE}\\logs\\pippackages_venv_${NODE_NAME}.log"
                    archiveArtifacts artifacts: "logs/pippackages_venv_${NODE_NAME}.log"
                }
            }
        }
        stage("Configure DevPi Login"){
          steps{    
            bat "venv36\\Scripts\\devpi.exe use https://devpi.library.illinois.edu"
            withCredentials([usernamePassword(credentialsId: 'DS_devpi', usernameVariable: 'DEVPI_USERNAME', passwordVariable: 'DEVPI_PASSWORD')]) {    
              bat "venv36\\Scripts\\devpi.exe login ${DEVPI_USERNAME} --password ${DEVPI_PASSWORD}"
            }
          }
        }
      }
      post{
        failure {
            bat "dir"
            deleteDir()
        }
      }
    }
    stage("Python Package"){
        environment{
            PATH = "${tool 'cmake3.12'};$PATH"
          }
        steps {
            dir("source"){
                powershell "&pipenv run python setup.py build -b ${WORKSPACE}\\36\\build --build-lib ${WORKSPACE}\\build\\36\\lib -j${env.NUMBER_OF_PROCESSORS} -t ${WORKSPACE}\\build\\36\\temp build_ext --inplace  | tee ${WORKSPACE}\\logs\\build.log"
            }

        }
        post{
            always{
                warnings canRunOnFailed: true, parserConfigurations: [[parserName: 'Pep8', pattern: 'logs/build.log']]
                archiveArtifacts artifacts: "logs/build.log"
            }
            failure{
                echo "Failed to build Python package"
            }
            success{
                echo "Successfully built project is ./build."
            }
        }
    }
      stage("Sphinx documentation"){
        steps {
            echo "Building docs on ${env.NODE_NAME}"
            dir("source"){
                powershell "& pipenv run sphinx-build -b html ${WORKSPACE}\\source\\docs\\source ${WORKSPACE}\\build\\docs\\html -d ${WORKSPACE}\\build\\docs\\doctrees | tee ${WORKSPACE}\\logs\\build_sphinx.log"
            }
        }
        post{
            always {
                recordIssues(tools: [sphinxBuild(name: 'Sphinx Documentation Build', pattern: 'logs/build_sphinx.log')])
                archiveArtifacts artifacts: 'logs/build_sphinx.log'
            }
            success{
                publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'build/docs/html', reportFiles: 'index.html', reportName: 'Documentation', reportTitles: ''])
                zip archive: true, dir: "${WORKSPACE}/build/docs/html", glob: '', zipFile: "dist/${DOC_ZIP_FILENAME}"
                stash includes: "dist/${DOC_ZIP_FILENAME},build/docs/html/**", name: 'DOCS_ARCHIVE'

            }
            cleanup{
                cleanWs(patterns: [[pattern: 'logs/build_sphinx.log', type: 'INCLUDE']])
                cleanWs(patterns: [[pattern: "dist/${DOC_ZIP_FILENAME}", type: 'INCLUDE']])
            }
        }
    }
    stage('Test') {
      parallel {
        stage("Tox") {
          when {
            equals expected: true, actual: params.TEST_RUN_TOX
          }
          environment{
            PATH = "${tool 'cmake3.12'};$PATH"
          }
          steps {
            dir("${REPORT_DIR}\\coverage\\"){
              bat "dir"
            }
            dir("source"){
              script{
                try{
                    bat "${WORKSPACE}\\venv36\\scripts\\tox.exe --parallel=auto --parallel-live --workdir ${WORKSPACE}\\.tox -vv -- --junitxml=${WORKSPACE}\\reports\\${junit_filename} --junit-prefix=${env.NODE_NAME}-pytest"

                } catch (exc) {
                    bat "${WORKSPACE}\\venv36\\scripts\\tox.exe --recreate --parallel=auto --parallel-live --workdir ${WORKSPACE}\\.tox -vv -- --junitxml=${WORKSPACE}\\reports\\${junit_filename} --junit-prefix=${env.NODE_NAME}-pytest"
                }
              }
            }
          }
        }
        stage("Run PyTest Unit Tests"){
            when {
               equals expected: true, actual: params.TEST_RUN_PYTEST
            }
            environment{
                junit_filename = "junit-${env.NODE_NAME}-${env.GIT_COMMIT.substring(0,7)}-pytest.xml"
            }
            steps{
                dir("source"){
                    bat "pipenv run python -m pytest --junitxml=${WORKSPACE}/reports/pytest/${junit_filename} --junit-prefix=${env.NODE_NAME}-pytest --cov-report html:${WORKSPACE}/reports/pytestcoverage/  --cov-report xml:${WORKSPACE}/reports/coverage.xml --cov=uiucprescon --integration --cov-config=${WORKSPACE}/source/setup.cfg"
                }
            }
            post {
                always {
                    junit "reports/pytest/${junit_filename}"
                    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: "reports/pytestcoverage", reportFiles: 'index.html', reportName: 'Coverage.py', reportTitles: ''])

                    publishCoverage adapters: [
                                coberturaAdapter('reports/coverage.xml')
                            ],
                        sourceFileResolver: sourceFiles('STORE_ALL_BUILD')

                    bat "del reports\\coverage.xml"

                }

            }
        }
        stage("Run Doctest Tests"){
          when {
            equals expected: true, actual: params.TEST_DOCTEST
          }
          steps {
            dir("source"){
              dir("${REPORT_DIR}/doctests"){
                echo "Cleaning doctest reports directory"
                deleteDir()
              }
              bat "pipenv run sphinx-build -b doctest docs\\source ${WORKSPACE}\\build\\docs -d ${WORKSPACE}\\build\\docs\\doctrees -v" 
            }
            bat "move ${WORKSPACE}\\build\\docs\\output.txt ${REPORT_DIR}\\doctest.txt"
          }
          post{
            always {
              dir("${REPORT_DIR}"){
                archiveArtifacts artifacts: "doctest.txt"
              }
            }
          }
        }
        stage("Run MyPy Static Analysis") {
          when {
            equals expected: true, actual: params.TEST_RUN_MYPY
          }
          steps{
            dir("${REPORT_DIR}/mypy/html"){
              deleteDir()
              bat "dir"
            }
            script{
                try{
                  dir("source"){
                    bat "dir"
                    bat "${WORKSPACE}\\venv36\\Scripts\\mypy.exe -p uiucprescon --html-report ${WORKSPACE}\\reports\\mypy\\html > ${WORKSPACE}\\logs\\mypy.log"
                  }
                } catch (exc) {
                  echo "MyPy found some warnings"
                }
            }
          }
          post {
            always {
              dir("${LOGS_DIR}"){
                warnings canRunOnFailed: true, parserConfigurations: [[parserName: 'MyPy', pattern: "mypy.log"]], unHealthy: ''
              }
              publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: "${REPORT_DIR}/mypy/html/", reportFiles: 'index.html', reportName: 'MyPy HTML Report', reportTitles: ''])
            }
          }
        }
        stage("Run Flake8 Static Analysis") {
            when {
                equals expected: true, actual: params.TEST_RUN_FLAKE8
            }
            steps{
                script{
                    try{
                        dir("source"){
                            bat "${WORKSPACE}\\venv\\Scripts\\flake8.exe uiucprescon --format=pylint --tee --output-file=${WORKSPACE}\\logs\\flake8.log"
                        }
                    } catch (exc) {
                        echo "flake8 found some warnings"
                    }
                }
            }
            post {
                always {
                    warnings canRunOnFailed: true, parserConfigurations: [[parserName: 'PyLint', pattern: 'logs/flake8.log']], unHealthy: ''
                }
                cleanup{
                    cleanWs(patterns: [[pattern: 'logs/flake8.log', type: 'INCLUDE']])
                }
            }
        }
      }
    }
    stage('Package') {
      environment{
          PATH = "${tool 'cmake3.12'};$PATH"
      }
      parallel{
        stage("Python sdist"){
          steps {
            dir("source"){
              bat "${tool 'CPython-3.6'}\\python setup.py sdist -d ${WORKSPACE}\\dist"
            }
          }
          post{
            success{
              stash includes: 'dist/*.tar.gz', name: "sdist"
              archiveArtifacts artifacts: "dist/*.tar.gz", fingerprint: true
            }
          }
        }
        stage("Python 3.6 whl"){
          environment {
            PATH = "${tool 'cmake3.12'}\\;${tool 'CPython-3.6'};$PATH"
            CL = "/MP"
          }
          steps {
            dir("source"){
              bat "pipenv run python setup.py build -b ${WORKSPACE}\\36\\build --build-lib ${WORKSPACE}\\build\\36\\lib -j${env.NUMBER_OF_PROCESSORS} -t ${WORKSPACE}\\build\\36\\temp bdist_wheel -d ${WORKSPACE}\\dist"
            }
          }
          post{
            success {
              archiveArtifacts artifacts: "dist/*p36*.whl", fingerprint: true
              stash includes: 'dist/*p36*.whl', name: "whl 3.6"
              
            }
          }
        }
        stage("Python 3.7 whl"){
          agent {
            node {
              label "Windows && Python3"
            }
          }
          environment {
            PATH = "${tool 'cmake3.12'}\\;${tool 'CPython-3.7'};$PATH"
            CL = "/MP"
          }
          steps {
              dir("source"){
                  
                  bat "\"${tool 'CPython-3.7'}\\python.exe\" setup.py build -b ../build/37/ -j${env.NUMBER_OF_PROCESSORS} --build-lib ../build/37/lib/ --build-temp ../build/37/temp build_ext --cmake-exec=${tool 'cmake3.12'}\\cmake.exe bdist_wheel -d ${WORKSPACE}\\dist"
              }
          }
          post{
              success{
                  stash includes: 'dist/*p37*.whl', name: "whl 3.7"
                  archiveArtifacts artifacts: "dist/*p37*.whl", fingerprint: true
              }
          }
        }
      }
      post{
        cleanup{
          cleanWs(patterns: [[pattern: "dist/*.whl,dist/*.tar.gz,dist/*.zip", type: 'INCLUDE']])
        }
      }
    }
    stage("Deploying to DevPi Staging") {
      when {
                allOf{
                    anyOf{
                        equals expected: true, actual: params.DEPLOY_DEVPI
                        triggeredBy "TimerTriggerCause"
                    }
                    anyOf {
                        equals expected: "master", actual: env.BRANCH_NAME
                        equals expected: "dev", actual: env.BRANCH_NAME
                    }
                }
            }
            options{
                timestamps()
            }
            stages{
                stage("Upload to DevPi Staging"){
              steps {
                unstash "whl 3.6"
                unstash "whl 3.7"
                unstash "sdist"
                unstash "DOCS_ARCHIVE"
                bat "venv36\\Scripts\\devpi.exe use https://devpi.library.illinois.edu"
                withCredentials([usernamePassword(credentialsId: 'DS_devpi', usernameVariable: 'DEVPI_USERNAME', passwordVariable: 'DEVPI_PASSWORD')]) {
                  bat "venv36\\Scripts\\devpi.exe login ${DEVPI_USERNAME} --password ${DEVPI_PASSWORD}"
                  bat "venv36\\Scripts\\devpi.exe use /${DEVPI_USERNAME}/${env.BRANCH_NAME}_staging"
                  dir("source"){
                    script {
                      bat "${WORKSPACE}\\venv36\\Scripts\\devpi.exe upload --from-dir ${WORKSPACE}\\dist --verbose"
                      try {
                        bat "${WORKSPACE}\\venv36\\Scripts\\devpi.exe upload --only-docs ${WORKSPACE}\\dist\\${DOC_ZIP_FILENAME}"
                      } catch (exc) {
                        echo "Unable to upload to devpi with docs."
                      }
                    }
                  }
                }
              }
            }
            stage("Test DevPi Packages") {
              parallel {
                stage("Testing Submitted Source Distribution") {
                  environment {
                      PATH = "${tool 'cmake3.12'};${tool 'CPython-3.6'};${tool 'CPython-3.7'};$PATH"
                      CL = "/MP"
                  }
                  steps {
                    echo "Testing Source tar.gz package in devpi"

                    timeout(20){
                      // bat "venv\\Scripts\\devpi.exe use https://devpi.library.illinois.edu/${env.BRANCH_NAME}_staging"
                      devpiTest(
                          devpiExecutable: "venv36\\Scripts\\devpi.exe",
                          url: "https://devpi.library.illinois.edu",
                          index: "${env.BRANCH_NAME}_staging",
                          pkgName: "${PKG_NAME}",
                          pkgVersion: "${PKG_VERSION}",
                          pkgRegex: "tar.gz",
                          detox: false
                      )
                    }
                    echo "Finished testing Source Distribution: .tar.gz"
                  }
                  post {
                      failure {
                          echo "Tests for .tar.gz source on DevPi failed."
                      }
                  }

                }
                stage("Built Distribution: py36 .whl") {
                  agent {
                    node {
                        label "Windows && Python3"
                    }
                  }
                  environment {
                    PATH = "${tool 'CPython-3.6'};$PATH"
                  }
                  options {
                    skipDefaultCheckout(true)
                  }

                  steps {
                      bat "${tool 'CPython-3.6'}\\python -m venv venv36"
                      bat "venv36\\Scripts\\python.exe -m pip install pip --upgrade"
                      bat "venv36\\Scripts\\pip.exe install devpi --upgrade"
                      echo "Testing Whl package in devpi"
                      devpiTest(
                              devpiExecutable: "venv36\\Scripts\\devpi.exe",
                              url: "https://devpi.library.illinois.edu",
                              index: "${env.BRANCH_NAME}_staging",
                              pkgName: "${PKG_NAME}",
                              pkgVersion: "${PKG_VERSION}",
                              pkgRegex: "36.*whl",
                              detox: false,
                              toxEnvironment: "py36"
                          )
                  }
                  post {
                      failure {
                          echo "Tests for whl on DevPi failed."
                      }
                  }
                }
                stage("Built Distribution: py37 .whl") {
                    agent {
                        node {
                          label "Windows && Python3"
                      }
                    }
                    environment {
                        PATH = "${tool 'CPython-3.7'};$PATH"
                    }
                    options {
                        skipDefaultCheckout(true)
                    }

                    steps {
                        echo "Testing Whl package in devpi"
                        bat "\"${tool 'CPython-3.7'}\\python.exe\" -m venv venv37"
                        bat "venv37\\Scripts\\python.exe -m pip install pip --upgrade"
                        bat "venv37\\Scripts\\pip.exe install devpi --upgrade"
                        devpiTest(
                                devpiExecutable: "venv37\\Scripts\\devpi.exe",
                                url: "https://devpi.library.illinois.edu",
                                index: "${env.BRANCH_NAME}_staging",
                                pkgName: "${PKG_NAME}",
                                pkgVersion: "${PKG_VERSION}",
                                pkgRegex: "37.*whl",
                                detox: false,
                                toxEnvironment: "py37"
                            )

                        echo "Finished testing Built Distribution: .whl"
                    }
                    post {
                      failure {
                        echo "Tests for whl on DevPi failed."
                      }
                    }
                  }
              }
              post {
                success {
                  echo "It Worked. Pushing file to ${env.BRANCH_NAME} index"
                  script {
                    withCredentials([usernamePassword(credentialsId: 'DS_devpi', usernameVariable: 'DEVPI_USERNAME', passwordVariable: 'DEVPI_PASSWORD')]) {
                      bat "venv36\\Scripts\\devpi.exe login ${DEVPI_USERNAME} --password ${DEVPI_PASSWORD}"
                      bat "venv36\\Scripts\\devpi.exe use /${DEVPI_USERNAME}/${env.BRANCH_NAME}_staging"
                      bat "venv36\\Scripts\\devpi.exe push ${PKG_NAME}==${PKG_VERSION} ${DEVPI_USERNAME}/${env.BRANCH_NAME}"
                    }
                  }
                }
              }
          }
      }

    }
    stage("Release") {
      parallel {
        stage("Release to DevPi Production") {
          when {
            allOf{
              equals expected: true, actual: params.DEPLOY_DEVPI_PRODUCTION
              branch "master"
            }
          }
          steps{
            input "Release ${PKG_NAME} ${PKG_VERSION} to DevPi Production?"
            // script {
            withCredentials([usernamePassword(credentialsId: 'DS_devpi', usernameVariable: 'DEVPI_USERNAME', passwordVariable: 'DEVPI_PASSWORD')]) {
              bat "venv36\\Scripts\\devpi.exe login ${DEVPI_USERNAME} --password ${DEVPI_PASSWORD}"
            }
            // }
            bat "venv36\\Scripts\\devpi.exe use /DS_Jenkins/${env.BRANCH_NAME}_staging"
            bat "venv36\\Scripts\\devpi.exe push ${PKG_NAME}==${PKG_VERSION} production/release"
          }
        }
        stage("Deploy Online Documentation") {
          when {
            allOf{
              equals expected: true, actual: params.DEPLOY_DOCS
              branch "master"
            }
          }
          steps {
            dir("${WORKSPACE}\\build/docs/html/"){
              input 'Update project documentation?'
              sshPublisher(
                publishers: [
                  sshPublisherDesc(
                    configName: 'apache-ns - lib-dccuser-updater', 
                    sshLabel: [label: 'Linux'], 
                    transfers: [sshTransfer(excludes: '', 
                    execCommand: '', 
                    execTimeout: 120000, 
                    flatten: false, 
                    makeEmptyDirs: false, 
                    noDefaultExcludes: false, 
                    patternSeparator: '[, ]+', 
                    remoteDirectory: "${params.DEPLOY_DOCS_URL_SUBFOLDER}", 
                    remoteDirectorySDF: false, 
                    removePrefix: '', 
                    sourceFiles: '**')], 
                  usePromotionTimestamp: false, 
                  useWorkspaceInPromotion: false, 
                  verbose: true
                  )
                ]
              )
            }
          }
        }
      }
    }
  }
  post {
    cleanup {
      
      dir("${WORKSPACE}/dist") {
        deleteDir()
      }
      script {

      //        remove any shared library built in place
        dir("source"){
            def generated_c_libraries = findFiles glob: '**/*.dll,**/*.pyd,**.so,**/*.dylib'
            generated_c_libraries .each { c_library ->
                echo "Deleting ${pwd()}\\${c_library}"
                bat "del ${c_library}"
            }
        }

        if(fileExists("source/setup.py")){
          dir("source"){
            try{
              bat "${WORKSPACE}\\venv36\\Scripts\\python.exe setup.py clean --all"
            } catch (Exception ex) {
              deleteDir()
            }
            bat "dir"
          }
        }
        if (env.BRANCH_NAME == "master" || env.BRANCH_NAME == "dev"){
          withCredentials([usernamePassword(credentialsId: 'DS_devpi', usernameVariable: 'DEVPI_USERNAME', passwordVariable: 'DEVPI_PASSWORD')]) {
            bat "venv36\\Scripts\\devpi.exe login DS_Jenkins --password ${DEVPI_PASSWORD}"
            bat "venv36\\Scripts\\devpi.exe use /DS_Jenkins/${env.BRANCH_NAME}_staging"
          }

          def devpi_remove_return_code = bat returnStatus: true, script:"venv36\\Scripts\\devpi.exe remove -y ${PKG_NAME}==${PKG_VERSION}"
          echo "Devpi remove exited with code ${devpi_remove_return_code}."
        }
      }
      bat "dir"
    }
  }
}
