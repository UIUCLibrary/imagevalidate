@Library(["devpi", "PythonHelpers"]) _

def CONFIGURATIONS = [
    "3.6": [
            python_install_url:"https://www.python.org/ftp/python/3.6.8/python-3.6.8-amd64.exe",
            package_testing: [
                whl: [
                    dockerfile: "ci/docker/python37/windows/msvc/test/Dockerfile",
                    label: "windows && Docker",
                    additionalBuildArgs: "--build-arg PYTHON_DOCKER_IMAGE_BASE=python:3.6-windowsservercore",
                    pkgRegex: "*cp36*.whl",
                ],
                sdist: [
                    dockerfile: "ci/docker/python37/windows/msvc/build/Dockerfile",
                    label: "windows && Docker",
                    additionalBuildArgs: "--build-arg PYTHON_INSTALLER_URL=https://www.python.org/ftp/python/3.6.8/python-3.6.8-amd64.exe ${(env.CHOCOLATEY_SOURCE != null) ? "--build-arg CHOCOLATEY_SOURCE=${env.CHOCOLATEY_SOURCE}": ''}",
                    pkgRegex: "*.zip",
                ]
            ],
            test_docker_image: "python:3.6-windowsservercore",
            tox_env: "py36",
            devpi_wheel_regex: "cp36"

        ],
    "3.7": [
            python_install_url:"https://www.python.org/ftp/python/3.7.5/python-3.7.5-amd64.exe",
            package_testing: [
                whl: [
                    dockerfile: "ci/docker/python37/windows/msvc/test/Dockerfile",
                    label: "windows && Docker",
                    additionalBuildArgs: "--build-arg PYTHON_DOCKER_IMAGE_BASE=python:3.7",
                    pkgRegex: "*cp37*.whl",
                ],
                sdist: [
                    dockerfile: "ci/docker/python37/windows/msvc/build/Dockerfile",
                    label: "windows && Docker",
                    additionalBuildArgs: "--build-arg PYTHON_INSTALLER_URL=https://www.python.org/ftp/python/3.7.5/python-3.7.5-amd64.exe ${(env.CHOCOLATEY_SOURCE != null) ? "--build-arg CHOCOLATEY_SOURCE=${env.CHOCOLATEY_SOURCE}": ''}",
                    pkgRegex: "*.zip",
                ]
            ],
            test_docker_image: "python:3.7",
            tox_env: "py37",
            devpi_wheel_regex: "cp37"
        ]
]

def remove_from_devpi(devpiExecutable, pkgName, pkgVersion, devpiIndex, devpiUsername, devpiPassword){
    script {
                try {
                    bat "${devpiExecutable} login ${devpiUsername} --password ${devpiPassword}"
                    bat "${devpiExecutable} use ${devpiIndex}"
                    bat "${devpiExecutable} remove -y ${pkgName}==${pkgVersion}"
                } catch (Exception ex) {
                    echo "Failed to remove ${pkgName}==${pkgVersion} from ${devpiIndex}"
            }

    }
}

def get_package_version(stashName, metadataFile){
    ws {
        unstash "${stashName}"
        script{
            def props = readProperties interpolate: true, file: "${metadataFile}"
            deleteDir()
            return props.Version
        }
    }
}

def get_package_name(stashName, metadataFile){
    ws {
        unstash "${stashName}"
        script{
            def props = readProperties interpolate: true, file: "${metadataFile}"
            deleteDir()
            return props.Name
        }
    }
}

def test_wheel(pkgRegex, python_version){
    script{

        bat "python -m venv venv\\${NODE_NAME}\\${python_version} && venv\\${NODE_NAME}\\${python_version}\\Scripts\\python.exe -m pip install pip --upgrade && venv\\${NODE_NAME}\\${python_version}\\Scripts\\pip.exe install tox --upgrade"

        def python_wheel = findFiles glob: "**/${pkgRegex}"
        python_wheel.each{
            echo "Testing ${it}"
            bat "${WORKSPACE}\\venv\\${NODE_NAME}\\${python_version}\\Scripts\\tox.exe --installpkg=${WORKSPACE}\\${it} -e py${python_version}"
        }
    }
}

def get_sonarqube_unresolved_issues(report_task_file){
    script{

        def props = readProperties  file: '.scannerwork/report-task.txt'
        def response = httpRequest url : props['serverUrl'] + "/api/issues/search?componentKeys=" + props['projectKey'] + "&resolved=no"
        def outstandingIssues = readJSON text: response.content
        return outstandingIssues
    }
}

def getChocolateySource(){
    script{
        try{
            configFileProvider([configFile(fileId: 'local_chocolatey_cache', variable: 'CHOCO_PROP_FILES')]) {
                def props = readProperties(CHOCO_PROP_FILES)
                return CHOCO_PROP_FILES.url
            }
        } catch (exc) {
            return 'https://chocolatey.org/api/v2/'
        }
    }
}

def defaultChocolateySource = getChocolateySource()

pipeline {
    agent none
  triggers {
    parameterizedCron '@daily % DEPLOY_DEVPI=true; TEST_RUN_TOX=true'
    }
  options {
        disableConcurrentBuilds()  //each branch has 1 job running at a time
        timeout(120)  // Timeout after 120 minutes. This shouldn't take this long but it hangs for some reason
  }
  environment {
    build_number = VersionNumber(projectStartDate: '2018-6-12', versionNumberString: '${BUILD_DATE_FORMATTED, "yy"}${BUILD_MONTH, XX}${BUILDS_THIS_MONTH, XX}', versionPrefix: '', worstResultForIncrement: 'SUCCESS')
    PIPENV_NOSPIN="DISABLED"
  }
  parameters {
      booleanParam(name: "TEST_RUN_TOX", defaultValue: false, description: "Run Tox Tests")
      booleanParam(name: "DEPLOY_DEVPI", defaultValue: false, description: "Deploy to devpi on https://devpi.library.illinois.edu/DS_Jenkins/${env.BRANCH_NAME}")
      booleanParam(name: "DEPLOY_DEVPI_PRODUCTION", defaultValue: false, description: "Deploy to production devpi on https://devpi.library.illinois.edu/production/release. Release Branch Only")
      booleanParam(name: "DEPLOY_DOCS", defaultValue: false, description: "Update online documentation. Release Branch Only")
      string(defaultValue: "${defaultChocolateySource}", description: '', name: 'CHOCOLATEY_SOURCE', trim: true)
      string(name: 'DEPLOY_DOCS_URL_SUBFOLDER', defaultValue: "imagevalidate", description: 'The directory that the docs should be saved under')
  }

  stages {
        stage("Getting Distribution Info"){
            agent {
                dockerfile {
                    filename 'ci/docker/python37/windows/msvc/build/Dockerfile'
                    label 'Windows&&Docker'
                    additionalBuildArgs "--build-arg CHOCOLATEY_SOURCE=${params.CHOCOLATEY_SOURCE}"
                 }
            }
            steps{
                timeout(5){
                    bat "python setup.py dist_info"
                }
            }
            post{
                success{
                    stash includes: "uiucprescon_imagevalidate.dist-info/**", name: 'DIST-INFO'
                    archiveArtifacts artifacts: "uiucprescon_imagevalidate.dist-info/**"
                }
                cleanup{
                    cleanWs(
                        deleteDirs: true,
                        patterns: [
                            [pattern: "uiucprescon_imagevalidate.dist-info/", type: 'INCLUDE'],
                            [pattern: ".eggs/", type: 'INCLUDE'],
                        ]
                    )
                }
            }
        }
    stage("Building"){
        agent {
            dockerfile {
                filename 'ci/docker/python37/windows/msvc/build/Dockerfile'
                label 'Windows&&Docker'
                additionalBuildArgs "--build-arg CHOCOLATEY_SOURCE=${params.CHOCOLATEY_SOURCE}"
             }
        }
        stages{
            stage("Building Python Package"){
                steps {
                    bat(
                        label: "Building",
                        script: "python setup.py build -b build --build-lib build\\lib -j${env.NUMBER_OF_PROCESSORS} -t build\\temp build_ext --inplace"
                        )
                }
                post{
                   success{
                       stash includes: "uiucprescon/imagevalidate/*.dll,uiucprescon/imagevalidate/*.pyd", name: 'COMPILED_BINARIES'
                   }
                }
            }
            stage("Sphinx Documentation"){
                environment{
                    PKG_NAME = get_package_name("DIST-INFO", "uiucprescon_imagevalidate.dist-info/METADATA")
                    PKG_VERSION = get_package_version("DIST-INFO", "uiucprescon_imagevalidate.dist-info/METADATA")
                }
                steps {
                    echo "Building docs on ${env.NODE_NAME}"
                    bat "python -m sphinx -b html docs\\source ${WORKSPACE}\\build\\docs\\html -d ${WORKSPACE}\\build\\docs\\doctrees"
                }
                post{
                    success{
                        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'build/docs/html', reportFiles: 'index.html', reportName: 'Documentation', reportTitles: ''])
                        script{
                            def DOC_ZIP_FILENAME = "${env.PKG_NAME}-${env.PKG_VERSION}.doc.zip"
                            zip archive: true, dir: "${WORKSPACE}/build/docs/html", glob: '', zipFile: "dist/${env.DOC_ZIP_FILENAME}"
                            stash includes: "dist/${env.DOC_ZIP_FILENAME},build/docs/html/**", name: 'DOCS_ARCHIVE'
                        }
                    }
                    cleanup{
                        cleanWs(patterns: [
                            [pattern: 'logs/build_sphinx.log', type: 'INCLUDE'],
                            [pattern: "dist/*.doc.zip", type: 'INCLUDE']
                            ]
                        )
                    }
                }
            }
        }
    }
    stage('Testing') {
        agent {
            dockerfile {
                filename 'ci/docker/python37/windows/msvc/build/Dockerfile'
                label 'Windows&&Docker'
                additionalBuildArgs "--build-arg CHOCOLATEY_SOURCE=${params.CHOCOLATEY_SOURCE}"
             }
        }
        environment{
            junit_filename = "junit-${env.NODE_NAME}-${env.GIT_COMMIT.substring(0,7)}-pytest.xml"
        }
        stages{
            stage("Setting up tests"){
                steps{
                    unstash "COMPILED_BINARIES"
                    bat(
                        label: "Creating logging and report directories",
                        script: """
                            if not exist logs mkdir logs
                            if not exist reports\\coverage mkdir reports\\coverage
                            if not exist reports\\doctests mkdir reports\\doctests
                            if not exist reports\\mypy\\html mkdir reports\\mypy\\html
                        """
                    )
                }
            }
            stage("Run Testing"){
              parallel {
                stage("Tox") {
                    when {
                        equals expected: true, actual: params.TEST_RUN_TOX
                    }
                    steps {
                        bat (
                            label: "Run Tox",
                            script: "tox --workdir ${WORKSPACE}\\.tox -vv  -e py -- --junitxml=${WORKSPACE}\\reports\\${junit_filename} --junit-prefix=${env.NODE_NAME}-pytest"
                        )
                    }
                    post {
                        always {
                            archiveArtifacts allowEmptyArchive: true, artifacts: '.tox/py*/log/*.log,.tox/log/*.log,logs/tox_report.json'
                            recordIssues(tools: [pep8(id: 'tox', name: 'Tox', pattern: '.tox/py*/log/*.log,.tox/log/*.log')])
                        }
                        cleanup{
                            cleanWs(
                                patterns: [
                                    [pattern: '.tox/py*/log/*.log', type: 'INCLUDE'],
                                    [pattern: '.tox/log/*.log', type: 'INCLUDE'],
                                    [pattern: 'logs/rox_report.json', type: 'INCLUDE']
                                ]
                            )
                        }
                    }
                }
                stage("Run PyTest Unit Tests"){

                    steps{
                        catchError(buildResult: "UNSTABLE", message: 'Did not pass all pytest tests', stageResult: "UNSTABLE") {
                            bat(
                                label: "Running Pytest",
                                script:"python -m pytest --junitxml=reports/pytest/${junit_filename} --junit-prefix=${env.NODE_NAME}-pytest --cov-report html:${WORKSPACE}/reports/pytestcoverage/  --cov-report xml:${WORKSPACE}/reports/coverage.xml --cov=uiucprescon --integration --cov-config=${WORKSPACE}/setup.cfg"
                            )
                        }
                    }
                    post {
                        always {
                            junit "reports/pytest/${junit_filename}"
                            stash includes: "reports/pytest/*.xml", name: "PYTEST_UNIT_TEST_RESULTS"
                            publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: "reports/pytestcoverage", reportFiles: 'index.html', reportName: 'Coverage.py', reportTitles: ''])
                            stash includes: "reports/coverage.xml", name: "COVERAGE_REPORT_DATA"
                            publishCoverage adapters: [
                                        coberturaAdapter('reports/coverage.xml')
                                    ],
                                sourceFileResolver: sourceFiles('STORE_ALL_BUILD'),
                                calculateDiffForChangeRequests: true
                        }
                    }
                }
                stage("Run Doctest Tests"){
                  steps {
                    catchError(buildResult: "SUCCESS", message: 'Doctest found issues', stageResult: "UNSTABLE") {
                        bat "pipenv run sphinx-build -b doctest docs\\source ${WORKSPACE}\\build\\docs -d ${WORKSPACE}\\build\\docs\\doctrees -v"
                    }
                    bat "move build\\docs\\output.txt reports\\doctest.txt"
                  }
                  post{
                    always {
                      archiveArtifacts artifacts: "reports/doctest.txt"
                    }
                    cleanup{
                        cleanWs(
                          deleteDirs: true,
                          patterns: [
                            [pattern: 'build/docs/doctrees/', type: 'INCLUDE'],
                          ]
                        )
                    }
                  }
                }
                stage("Run MyPy Static Analysis") {
                  steps{

                    catchError(buildResult: "SUCCESS", message: 'MyPy found issues', stageResult: "UNSTABLE") {
                        bat(
                            label: "Running Mypy",
                            script: "mypy -p uiucprescon --html-report ${WORKSPACE}\\reports\\mypy\\html > ${WORKSPACE}\\logs\\mypy.log"
                        )
                    }
                  }
                  post {
                    always {
                        recordIssues(tools: [myPy(name: 'MyPy', pattern: 'logs/mypy.log')])
                        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: "reports/mypy/html/", reportFiles: 'index.html', reportName: 'MyPy HTML Report', reportTitles: ''])
                    }
                    cleanup{
                        cleanWs(
                          deleteDirs: true,
                          patterns: [
                            [pattern: '.mypy_cache/', type: 'INCLUDE'],
                          ]
                        )
                    }
                  }
                }
                stage("Run Flake8 Static Analysis") {
                    steps{
                        catchError(buildResult: "SUCCESS", message: 'Flake8 found issues', stageResult: "UNSTABLE") {
                            bat "flake8 uiucprescon --format=pylint --tee --output-file=logs\\flake8.log"
                        }
                    }
                    post {
                        always {
                            recordIssues(tools: [flake8(name: 'Flake8', pattern: 'logs/flake8.log')])
                        }
                    }
                }
              }
          }
        stage("Run Sonarqube Analysis"){
                agent {
                  label 'windows && !docker'
                }
                when{
                    equals expected: "master", actual: env.BRANCH_NAME
                    beforeAgent true
                }
                options{
                    timeout(5)
                }
                environment{
                    scannerHome = tool name: 'sonar-scanner-3.3.0', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
//                     PKG_VERSION = get_package_version("DIST-INFO", "uiucprescon_imagevalidate.dist-info/METADATA")
                }
                steps{
                    unstash "DIST-INFO"
                    unstash "COVERAGE_REPORT_DATA"
                    unstash "PYTEST_UNIT_TEST_RESULTS"
                    script{
                        def props = readProperties interpolate: true, file: "uiucprescon_imagevalidate.dist-info/METADATA"
                        withSonarQubeEnv(installationName: "sonarqube.library.illinois.edu") {
                        bat(
                            label: "Running sonar scanner",
                            script: '\
                "%scannerHome%/bin/sonar-scanner" \
                -D"sonar.projectBaseDir=%WORKSPACE%" \
                -D"sonar.scm.provider=git" \
                -D"sonar.python.coverage.reportPaths=%WORKSPACE%/reports/coverage.xml" \
                -D"sonar.python.xunit.reportPath=reports/pytest/pytest-junit.xml" \
                -D"sonar.working.directory=%WORKSPACE%\\.scannerwork" \
                -X')

//                -Dsonar.python.pylint.reportPath=%WORKSPACE%/reports/pylint.txt \
//                            bat(
//                                label: "Running sonar scanner",
//                                script: '\
//"%scannerHome%\\bin\\sonar-scanner" \
//-D"sonar.projectVersion=${props.Version}" \
//-D"sonar.projectBaseDir=%WORKSPACE%" \
//-D"sonar.buildString=%BUILD_TAG%" \
//-D"sonar.scm.provider=git" \
//-D"sonar.python.coverage.reportPaths=%WORKSPACE%/reports/coverage.xml" \
//-D"sonar.python.xunit.reportPath=%WORKSPACE%/reports/pytest/%junit_filename%" \
//-D"sonar.working.directory=%WORKSPACE%\\.scannerwork" \
//-X'
//                            )
                        }
                    }
                    script{
                        def sonarqube_result = waitForQualityGate(abortPipeline: false)
                        if (sonarqube_result.status != 'OK') {
                            unstable "SonarQube quality gate: ${sonarqube_result.status}"
                        }
                        def outstandingIssues = get_sonarqube_unresolved_issues(".scannerwork/report-task.txt")
                        writeJSON file: 'reports/sonar-report.json', json: outstandingIssues
                    }
                }
                post{
                    always{
                        archiveArtifacts(
                            allowEmptyArchive: true,
                            artifacts: ".scannerwork/report-task.txt"
                        )
                        archiveArtifacts allowEmptyArchive: true, artifacts: 'reports/sonar-report.json'
                        recordIssues(tools: [sonarQube(pattern: 'reports/sonar-report.json')])
                    }
                }
            }
      }
      post{
        cleanup{
            cleanWs(patterns: [
            [pattern: 'logs/flake8.log', type: 'INCLUDE'],
            [pattern: 'reports/coverage.xml"', type: 'INCLUDE'],
            ])
        }
      }
    }
    stage("Create Python Packages"){
        stages{
            stage('Creating Source Package') {
                agent{
                    dockerfile {
                        filename 'ci/docker/python37/windows/msvc/build/Dockerfile'
                        label 'windows && Docker'
                        additionalBuildArgs "--build-arg CHOCOLATEY_SOURCE=${params.CHOCOLATEY_SOURCE}"
                    }
                }
                steps {
                    bat "python setup.py sdist -d dist --format zip"
                }
                post{
                    success{
                        stash includes: 'dist/*.zip', name: "sdist"
                        archiveArtifacts artifacts: "dist/*.zip", fingerprint: true
                    }
                    cleanup{
                        cleanWs(
                            deleteDirs: true,
                            patterns: [
                                [pattern: 'dist/', type: 'INCLUDE'],
                                [pattern: 'build/', type: 'INCLUDE'],
                            ]
                        )
                    }
                }
            }
            stage('Creating Binary Packages'){
                matrix{
                    agent none
                    axes{
                        axis {
                            name "PYTHON_VERSION"
                            values(
                                "3.6",
                                "3.7"
                            )
                        }
                    }
                    stages{
                        stage("Creating bdist wheel"){
                            agent{
                                dockerfile {
                                    filename 'ci/docker/python37/windows/msvc/build/Dockerfile'
                                    label 'windows && Docker'
                                    additionalBuildArgs "--build-arg PYTHON_INSTALLER_URL=${CONFIGURATIONS[PYTHON_VERSION].python_install_url} --build-arg CHOCOLATEY_SOURCE=${params.CHOCOLATEY_SOURCE}"
                                }
                            }
                            options{
                                timeout(15)
                            }
                            steps{
                                bat(
                                    label: "Checking Python version",
                                    script: "python --version"
                                )
                                bat(
                                    label: "Creating whl for ${PYTHON_VERSION}",
                                    script: "python setup.py build -b build/ -j${env.NUMBER_OF_PROCESSORS} --build-lib build/lib --build-temp build/temp bdist_wheel -d ${WORKSPACE}\\dist"
                                    )
                            }
                            post{
                                always{
                                    script{
                                        findFiles(glob: "build/lib/**/*.pyd").each{
                                            bat(
                                                label: "Checking Python extension for dependents",
                                                script: "dumpbin /DEPENDENTS ${it.path}"
                                                )
                                        }
                                    }
                                }
                                success{
                                    stash includes: "dist/${CONFIGURATIONS[PYTHON_VERSION].package_testing.whl.pkgRegex}", name: "whl ${PYTHON_VERSION}"
                                    archiveArtifacts artifacts: "dist/*.whl", fingerprint: true
                                }
                                cleanup{
                                    cleanWs(
                                        deleteDirs: true,
                                        patterns: [
                                            [pattern: 'dist/', type: 'INCLUDE'],
                                            [pattern: 'build/', type: 'INCLUDE'],
                                        ]
                                    )
                                }
                            }
                        }
                    }
                }
            }
            stage('Testing all Package') {
                matrix{
                    agent none
                    axes{
                        axis {
                            name "PYTHON_VERSION"
                            values(
                                "3.6",
                                "3.7"
                            )
                        }
                        axis {
                            name "PYTHON_PACKAGE_TYPE"
                            values(
                                "whl",
                                "sdist"
                            )
                        }
                    }
                    stages{
                        stage("Testing Package"){
                            agent{
                                dockerfile {
                                    filename "${CONFIGURATIONS[PYTHON_VERSION].package_testing[PYTHON_PACKAGE_TYPE].dockerfile}"
                                    label "${CONFIGURATIONS[PYTHON_VERSION].package_testing[PYTHON_PACKAGE_TYPE].label}"
                                    additionalBuildArgs "${CONFIGURATIONS[PYTHON_VERSION].package_testing[PYTHON_PACKAGE_TYPE].additionalBuildArgs}"
                                }
                            }
                            options{
                                timeout(15)
                            }
                            steps{
                                script{
                                    if(PYTHON_PACKAGE_TYPE == "whl"){
                                        unstash "${PYTHON_PACKAGE_TYPE} ${PYTHON_VERSION}"
                                    }
                                    if(PYTHON_PACKAGE_TYPE == "sdist"){
                                        unstash "sdist"
                                    }
                                }
                                bat(
                                    label: "Checking Python version",
                                    script: "python --version"
                                )
                                script{
                                    findFiles(glob: "**/${CONFIGURATIONS[PYTHON_VERSION].package_testing[PYTHON_PACKAGE_TYPE].pkgRegex}").each{
                                        bat(
                                            script: "tox --installpkg=${WORKSPACE}\\${it} -e py",
                                            label: "Testing ${it}"
                                        )
                                    }
                                }
                            }
                            post{
                                failure{
                                    bat "tree .tox\\py\\lib\\site-packages\\uiucprescon /A /F"
                                }
                                cleanup{
                                    cleanWs(
                                        deleteDirs: true,
                                        patterns: [
                                            [pattern: 'dist/', type: 'INCLUDE'],
                                            [pattern: 'build/', type: 'INCLUDE'],
                                            [pattern: '.tox/', type: 'INCLUDE'],
                                            ]
                                    )
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    stage("Deploy to Devpi"){
        when {
            allOf{
                equals expected: true, actual: params.DEPLOY_DEVPI
                anyOf {
                    equals expected: "master", actual: env.BRANCH_NAME
                    equals expected: "dev", actual: env.BRANCH_NAME
                }
            }
            beforeAgent true
        }
        agent none
        environment{
            DEVPI = credentials("DS_devpi")
        }
        stages{
            stage("Deploy to Devpi Staging") {
                agent {
                    dockerfile {
                        filename 'ci/docker/deploy/devpi/deploy/Dockerfile'
                        label 'linux&&docker'
                        additionalBuildArgs '--build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g)'
                      }
                }
                options{
                    timeout(5)
                }
                steps {
                    unstash "whl 3.6"
                    unstash "whl 3.7"
                    unstash "sdist"
                    unstash "DOCS_ARCHIVE"
                    sh(
                        label: "Connecting to DevPi Server",
                        script: 'devpi use https://devpi.library.illinois.edu --clientdir ${WORKSPACE}/devpi && devpi login $DEVPI_USR --password $DEVPI_PSW --clientdir ${WORKSPACE}/devpi'
                    )
                    sh(
                        label: "Uploading to DevPi Staging",
                        script: """devpi use /${env.DEVPI_USR}/${env.BRANCH_NAME}_staging --clientdir ${WORKSPACE}/devpi
    devpi upload --from-dir dist --clientdir ${WORKSPACE}/devpi"""
                    )
                }
            }
            stage("Test DevPi packages") {
                matrix {
                    axes {
                        axis {
                            name 'PYTHON_VERSION'
                            values '3.6', '3.7'
                        }
                        axis {
                            name 'FORMAT'
                            values 'zip', "whl"
                        }
                    }
                    agent none
                    stages{
                        stage("Testing DevPi Wheel Package"){
                            agent {
                              dockerfile {
                                additionalBuildArgs "--build-arg PYTHON_DOCKER_IMAGE_BASE=${CONFIGURATIONS[PYTHON_VERSION].test_docker_image}"
                                filename 'ci/docker/deploy/devpi/test/windows/whl/Dockerfile'
                                label 'windows && docker'
                              }
                            }
                            when{
                                equals expected: "whl", actual: FORMAT
                                beforeAgent true
                            }
                            options{
                                timeout(10)
                            }
                            steps{
                                unstash "DIST-INFO"
                                script{
                                    def props = readProperties interpolate: true, file: "uiucprescon_imagevalidate.dist-info/METADATA"
                                    cleanWs(patterns: [[pattern: "uiucprescon_imagevalidate.dist/METADATA", type: 'INCLUDE']])
                                    bat "python --version"
                                    bat(
                                        label: "Connecting to DevPi index",
                                        script: "devpi use https://devpi.library.illinois.edu --clientdir certs\\ && devpi login %DEVPI_USR% --password %DEVPI_PSW% --clientdir certs\\ && devpi use ${env.BRANCH_NAME}_staging --clientdir certs\\"
                                    )

                                    bat(
                                        label: "Running tests on Devpi",
                                        script: "devpi test --index ${env.BRANCH_NAME}_staging ${props.Name}==${props.Version} -s ${CONFIGURATIONS[PYTHON_VERSION].devpi_wheel_regex} --clientdir certs\\ -e ${CONFIGURATIONS[PYTHON_VERSION].tox_env} -v"
                                    )
                                }
                            }
                        }
                        stage("Testing DevPi source Package"){
                            agent {
                                dockerfile {
                                    additionalBuildArgs "--build-arg PYTHON_INSTALLER_URL=${CONFIGURATIONS[PYTHON_VERSION].python_install_url} --build-arg CHOCOLATEY_SOURCE=${params.CHOCOLATEY_SOURCE}"
                                    filename 'ci/docker/deploy/devpi/test/windows/source/Dockerfile'
                                    label 'windows && docker'
                                }
                            }
                            when{
                                equals expected: "zip", actual: FORMAT
                                beforeAgent true
                            }
                            steps{
                                unstash "DIST-INFO"
                                script{
                                    def props = readProperties interpolate: true, file: "uiucprescon_imagevalidate.dist-info/METADATA"
                                    cleanWs(patterns: [[pattern: "uiucprescon_imagevalidate.dist-info/METADATA", type: 'INCLUDE']])
                                    bat "python --version"
                                    bat(
                                        label: "Connecting to DevPi index",
                                        script: "devpi use https://devpi.library.illinois.edu --clientdir certs\\ && devpi login %DEVPI_USR% --password %DEVPI_PSW% --clientdir certs\\ && devpi use ${env.BRANCH_NAME}_staging --clientdir certs\\"
                                    )
                                    bat(
                                        label: "Running tests on Devpi",
                                        script: "devpi test --index ${env.BRANCH_NAME}_staging ${props.Name}==${props.Version} -s zip --clientdir certs\\ -e ${CONFIGURATIONS[PYTHON_VERSION].tox_env} -v"
                                    )
                                }
                            }
                        }
                    }
                }
            }
        }
        post{
            success{
                node('linux && docker') {
                   script{
                        docker.build("imagevalidate:devpi.${env.BUILD_ID}",'-f ./ci/docker/deploy/devpi/deploy/Dockerfile --build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g) .').inside{
                            unstash "DIST-INFO"
                            def props = readProperties interpolate: true, file: 'uiucprescon_imagevalidate.dist-info/METADATA'
                            sh(
                                label: "Connecting to DevPi Server",
                                script: 'devpi use https://devpi.library.illinois.edu --clientdir ${WORKSPACE}/devpi && devpi login $DEVPI_USR --password $DEVPI_PSW --clientdir ${WORKSPACE}/devpi'
                            )
                            sh "devpi use /DS_Jenkins/${env.BRANCH_NAME}_staging --clientdir ${WORKSPACE}/devpi"
                            sh "devpi push ${props.Name}==${props.Version} DS_Jenkins/${env.BRANCH_NAME} --clientdir ${WORKSPACE}/devpi"
                        }
                   }
                }
            }
            cleanup{
                node('linux && docker') {
                   script{
                        docker.build("imagevalidate:devpi.${env.BUILD_ID}",'-f ./ci/docker/deploy/devpi/deploy/Dockerfile --build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g) .').inside{
                            unstash "DIST-INFO"
                            def props = readProperties interpolate: true, file: 'uiucprescon_imagevalidate.dist-info/METADATA'
                            sh(
                                label: "Connecting to DevPi Server",
                                script: 'devpi use https://devpi.library.illinois.edu --clientdir ${WORKSPACE}/devpi && devpi login $DEVPI_USR --password $DEVPI_PSW --clientdir ${WORKSPACE}/devpi'
                            )
                            sh "devpi use /DS_Jenkins/${env.BRANCH_NAME}_staging --clientdir ${WORKSPACE}/devpi"
                            sh "devpi remove -y ${props.Name}==${props.Version} --clientdir ${WORKSPACE}/devpi"
                        }
                   }
                }
            }
        }
    }
    stage("Release") {
      parallel {

        stage("Deploy Online Documentation") {
          when {
            allOf{
              equals expected: true, actual: params.DEPLOY_DOCS
              branch "master"
            }
          }
          steps {
            dir("${WORKSPACE}\\build/docs/html/"){
              input 'Update project documentation?'
              sshPublisher(
                publishers: [
                  sshPublisherDesc(
                    configName: 'apache-ns - lib-dccuser-updater', 
                    sshLabel: [label: 'Linux'], 
                    transfers: [sshTransfer(excludes: '', 
                    execCommand: '', 
                    execTimeout: 120000, 
                    flatten: false, 
                    makeEmptyDirs: false, 
                    noDefaultExcludes: false, 
                    patternSeparator: '[, ]+', 
                    remoteDirectory: "${params.DEPLOY_DOCS_URL_SUBFOLDER}", 
                    remoteDirectorySDF: false, 
                    removePrefix: '', 
                    sourceFiles: '**')], 
                  usePromotionTimestamp: false, 
                  useWorkspaceInPromotion: false, 
                  verbose: true
                  )
                ]
              )
            }
          }
        }
      }
    }
  }
}
